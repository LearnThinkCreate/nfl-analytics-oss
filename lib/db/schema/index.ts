import { pgTable, index, varchar, integer, timestamp, foreignKey, date, time, doublePrecision, primaryKey, pgView, pgMaterializedView, text, bigint, numeric } from "drizzle-orm/pg-core"
import { sql } from "drizzle-orm"



export const teams = pgTable("teams", {
	teamAbbr: varchar("team_abbr", { length: 10 }).primaryKey().notNull(),
	teamName: varchar("team_name", { length: 100 }).notNull(),
	teamId: integer("team_id"),
	teamNick: varchar("team_nick", { length: 50 }),
	teamConf: varchar("team_conf", { length: 5 }),
	teamDivision: varchar("team_division", { length: 10 }),
	teamColor: varchar("team_color", { length: 7 }),
	teamColor2: varchar("team_color2", { length: 7 }),
	teamColor3: varchar("team_color3", { length: 7 }),
	teamColor4: varchar("team_color4", { length: 7 }),
	teamLogoWikipedia: varchar("team_logo_wikipedia", { length: 255 }),
	teamLogoEspn: varchar("team_logo_espn", { length: 255 }),
	teamWordmark: varchar("team_wordmark", { length: 255 }),
	teamConferenceLogo: varchar("team_conference_logo", { length: 255 }),
	teamLeagueLogo: varchar("team_league_logo", { length: 255 }),
	teamLogoSquared: varchar("team_logo_squared", { length: 255 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_teams_conference_division").using("btree", table.teamConf.asc().nullsLast().op("text_ops"), table.teamDivision.asc().nullsLast().op("text_ops")),
	index("idx_teams_name_trgm").using("gin", table.teamName.asc().nullsLast().op("gin_trgm_ops")),
]);

export const players = pgTable("players", {
	gsisId: varchar("gsis_id", { length: 50 }).primaryKey().notNull(),
	status: varchar({ length: 20 }),
	displayName: varchar("display_name", { length: 100 }).notNull(),
	firstName: varchar("first_name", { length: 50 }),
	lastName: varchar("last_name", { length: 50 }),
	esbId: varchar("esb_id", { length: 50 }),
	birthDate: date("birth_date"),
	collegeName: varchar("college_name", { length: 100 }),
	position: varchar({ length: 5 }),
	jerseyNumber: integer("jersey_number"),
	height: integer(),
	weight: integer(),
	teamAbbr: varchar("team_abbr", { length: 10 }),
	currentTeamId: varchar("current_team_id", { length: 50 }),
	entryYear: integer("entry_year"),
	rookieYear: integer("rookie_year"),
	draftClub: varchar("draft_club", { length: 10 }),
	collegeConference: varchar("college_conference", { length: 50 }),
	statusShortDescription: varchar("status_short_description", { length: 20 }),
	gsisItId: integer("gsis_it_id"),
	shortName: varchar("short_name", { length: 50 }),
	headshot: varchar({ length: 255 }),
	draftNumber: integer("draft_number"),
	draftround: integer(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_players_active").using("btree", table.status.asc().nullsLast().op("text_ops")).where(sql`((status)::text = 'Active'::text)`),
	index("idx_players_display_name_trgm").using("gin", table.displayName.asc().nullsLast().op("gin_trgm_ops")),
	index("idx_players_name_collation").using("btree", table.displayName.asc().nullsLast().op("text_ops")),
	index("idx_players_name_search").using("btree", sql`lower((display_name)::text)`),
	index("idx_players_position").using("btree", table.position.asc().nullsLast().op("text_ops")),
	index("idx_players_team").using("btree", table.teamAbbr.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.teamAbbr],
			foreignColumns: [teams.teamAbbr],
			name: "players_team_abbr_fkey"
		}),
]);

export const games = pgTable("games", {
	gameId: varchar("game_id", { length: 50 }).primaryKey().notNull(),
	season: integer().notNull(),
	gameType: varchar("game_type", { length: 10 }).notNull(),
	week: integer().notNull(),
	gameday: date().notNull(),
	weekday: varchar({ length: 10 }),
	gametime: time(),
	awayTeam: varchar("away_team", { length: 10 }).notNull(),
	awayScore: integer("away_score"),
	homeTeam: varchar("home_team", { length: 10 }).notNull(),
	homeScore: integer("home_score"),
	location: varchar({ length: 100 }),
	result: integer(),
	total: integer(),
	overtime: integer(),
	gsis: integer(),
	nflDetailId: varchar("nfl_detail_id", { length: 50 }),
	pfr: varchar({ length: 50 }),
	pff: integer(),
	espn: integer(),
	ftn: integer(),
	awayRest: integer("away_rest"),
	homeRest: integer("home_rest"),
	awayMoneyline: doublePrecision("away_moneyline"),
	homeMoneyline: doublePrecision("home_moneyline"),
	spreadLine: doublePrecision("spread_line"),
	awaySpreadOdds: doublePrecision("away_spread_odds"),
	homeSpreadOdds: doublePrecision("home_spread_odds"),
	totalLine: doublePrecision("total_line"),
	underOdds: doublePrecision("under_odds"),
	overOdds: doublePrecision("over_odds"),
	divGame: integer("div_game"),
	roof: varchar({ length: 20 }),
	surface: varchar({ length: 50 }),
	temp: integer(),
	wind: integer(),
	awayQbId: varchar("away_qb_id", { length: 50 }),
	homeQbId: varchar("home_qb_id", { length: 50 }),
	awayQbName: varchar("away_qb_name", { length: 100 }),
	homeQbName: varchar("home_qb_name", { length: 100 }),
	awayCoach: varchar("away_coach", { length: 100 }),
	homeCoach: varchar("home_coach", { length: 100 }),
	stadiumId: varchar("stadium_id", { length: 50 }),
	stadium: varchar({ length: 100 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_games_date").using("btree", table.gameday.asc().nullsLast().op("date_ops")),
	index("idx_games_game_type").using("btree", table.gameType.asc().nullsLast().op("text_ops")),
	index("idx_games_season_week").using("btree", table.season.asc().nullsLast().op("int4_ops"), table.week.asc().nullsLast().op("int4_ops"), table.gameType.asc().nullsLast().op("text_ops")),
	index("idx_games_teams").using("btree", table.homeTeam.asc().nullsLast().op("text_ops"), table.awayTeam.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.awayQbId],
			foreignColumns: [players.gsisId],
			name: "games_away_qb_id_fkey"
		}),
	foreignKey({
			columns: [table.awayTeam],
			foreignColumns: [teams.teamAbbr],
			name: "games_away_team_fkey"
		}),
	foreignKey({
			columns: [table.homeQbId],
			foreignColumns: [players.gsisId],
			name: "games_home_qb_id_fkey"
		}),
	foreignKey({
			columns: [table.homeTeam],
			foreignColumns: [teams.teamAbbr],
			name: "games_home_team_fkey"
		}),
]);

export const snapCounts = pgTable("snap_counts", {
	gsisId: varchar("gsis_id", { length: 50 }).notNull(),
	gameId: varchar("game_id", { length: 50 }).notNull(),
	season: integer().notNull(),
	week: integer().notNull(),
	offenseSnaps: integer("offense_snaps"),
	offensePct: doublePrecision("offense_pct"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_snap_counts_gsis_id").using("btree", table.gsisId.asc().nullsLast().op("text_ops")),
	index("idx_snap_counts_gsis_id_season").using("btree", table.gsisId.asc().nullsLast().op("int4_ops"), table.season.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.gameId],
			foreignColumns: [games.gameId],
			name: "snap_counts_game_id_fkey"
		}),
	foreignKey({
			columns: [table.gsisId],
			foreignColumns: [players.gsisId],
			name: "snap_counts_gsis_id_fkey"
		}),
	primaryKey({ columns: [table.gsisId, table.gameId], name: "snap_counts_pkey"}),
]);
export const playerCareerTeam = pgView("player_career_team", {	gsisId: varchar("gsis_id", { length: 50 }),
	team: varchar({ length: 10 }),
	lastSeason: integer("last_season"),
}).as(sql`WITH player_team_games AS ( SELECT player_game_stats.player_id, player_game_stats.team, row_number() OVER (PARTITION BY player_game_stats.player_id ORDER BY (count(*)) DESC, (max(player_game_stats.season)) DESC, (max( CASE WHEN player_game_stats.season = (( SELECT max(games.season) AS max FROM games)) THEN player_game_stats.week ELSE 0 END)) DESC) AS team_rank FROM player_game_stats GROUP BY player_game_stats.player_id, player_game_stats.team ), ranked_teams AS ( SELECT player_team_games.player_id, player_team_games.team FROM player_team_games WHERE player_team_games.team_rank = 1 ) SELECT c.player_id AS gsis_id, CASE WHEN c.last_season < (( SELECT max(games.season) AS max FROM games)) THEN h.team ELSE p.team_abbr END AS team, c.last_season FROM player_career_stats c JOIN ranked_teams h ON c.player_id::text = h.player_id::text JOIN players p ON c.player_id::text = p.gsis_id::text WHERE c.season_type = 'REG'::text`);

export const playerGameStats = pgMaterializedView("player_game_stats", {	gameId: varchar("game_id", { length: 50 }),
	season: integer(),
	week: integer(),
	playerId: varchar("player_id", { length: 50 }),
	playerName: text("player_name"),
	team: varchar({ length: 10 }),
	homeAway: text("home_away"),
	seasonType: text("season_type"),
	opponentTeam: text("opponent_team"),
	position: text(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	totalPlays: bigint("total_plays", { mode: "number" }),
	plays: integer(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	qbPlays: bigint("qb_plays", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	completions: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	attempts: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passingTds: bigint("passing_tds", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	interceptions: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sacks: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passingYards: bigint("passing_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sackYards: bigint("sack_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passingAirYards: bigint("passing_air_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passingFirstDowns: bigint("passing_first_downs", { mode: "number" }),
	cpoe: doublePrecision(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passes: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	qbTargets: bigint("qb_targets", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	qbAirYards: bigint("qb_air_yards", { mode: "number" }),
	passingEpa: doublePrecision("passing_epa"),
	successfulPasses: doublePrecision("successful_passes"),
	totalCpoe: doublePrecision("total_cpoe"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	cpoeCount: bigint("cpoe_count", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	dropbacks: bigint({ mode: "number" }),
	dropbackEpa: doublePrecision("dropback_epa"),
	successfulDropbacks: doublePrecision("successful_dropbacks"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	scrambles: bigint({ mode: "number" }),
	scrambleEpa: doublePrecision("scramble_epa"),
	scrambleYards: doublePrecision("scramble_yards"),
	successfulScrambles: doublePrecision("successful_scrambles"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	scrambleFirstDowns: bigint("scramble_first_downs", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	carries: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingTds: bigint("rushing_tds", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingYards: bigint("rushing_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingFirstDowns: bigint("rushing_first_downs", { mode: "number" }),
	rushingEpa: doublePrecision("rushing_epa"),
	successfulRushes: doublePrecision("successful_rushes"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	targets: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receptions: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingTds: bigint("receiving_tds", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingYards: bigint("receiving_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingYardsAfterCatch: bigint("receiving_yards_after_catch", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingFirstDowns: bigint("receiving_first_downs", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingAirYards: bigint("receiving_air_yards", { mode: "number" }),
	receivingEpa: doublePrecision("receiving_epa"),
	successfulReceptions: doublePrecision("successful_receptions"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	explosivePasses: bigint("explosive_passes", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	explosiveRuns: bigint("explosive_runs", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	explosiveReceptions: bigint("explosive_receptions", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	explosiveScrambles: bigint("explosive_scrambles", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sackFumbles: bigint("sack_fumbles", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sackFumblesLost: bigint("sack_fumbles_lost", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingFumbles: bigint("rushing_fumbles", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingFumblesLost: bigint("rushing_fumbles_lost", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingFumbles: bigint("receiving_fumbles", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingFumblesLost: bigint("receiving_fumbles_lost", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passing2PtConversions: bigint("passing_2pt_conversions", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushing2PtConversions: bigint("rushing_2pt_conversions", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receiving2PtConversions: bigint("receiving_2pt_conversions", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	specialTeamsTds: bigint("special_teams_tds", { mode: "number" }),
	teamGameTargets: integer("team_game_targets"),
	teamGameAirYards: integer("team_game_air_yards"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	touches: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	opportunities: bigint({ mode: "number" }),
	totalEpa: doublePrecision("total_epa"),
}).as(sql`WITH playstats_agg AS ( SELECT ps_1.player_id, ps_1.game_id, ps_1.season, ps_1.week, ps_1.team, max(pl."position"::text) AS "position", count(DISTINCT ps_1.play_id) AS total_plays, sum( CASE WHEN ps_1.is_comp THEN 1 ELSE 0 END) AS completions, sum( CASE WHEN ps_1.is_att THEN 1 ELSE 0 END) AS attempts, sum( CASE WHEN ps_1.is_pass_td THEN 1 ELSE 0 END) AS passing_tds, sum( CASE WHEN ps_1.is_int THEN 1 ELSE 0 END) AS interceptions, sum( CASE WHEN ps_1.is_sack THEN 1 ELSE 0 END) AS sacks, sum( CASE WHEN ps_1.is_sack_fumble THEN 1 ELSE 0 END) AS sack_fumbles, sum( CASE WHEN ps_1.is_sack_fumble_lost THEN 1 ELSE 0 END) AS sack_fumbles_lost, sum( CASE WHEN ps_1.is_pass_first_down THEN 1 ELSE 0 END) AS passing_first_downs, sum( CASE WHEN ps_1.is_pass_2pt THEN 1 ELSE 0 END) AS passing_2pt_conversions, sum( CASE WHEN ps_1.qb_target THEN 1 ELSE 0 END) AS qb_targets, sum( CASE WHEN ps_1.is_carry THEN 1 ELSE 0 END) AS carries, sum( CASE WHEN ps_1.is_rush_td THEN 1 ELSE 0 END) AS rushing_tds, sum( CASE WHEN ps_1.is_rush_fumble THEN 1 ELSE 0 END) AS rushing_fumbles, sum( CASE WHEN ps_1.is_rush_fumble_lost THEN 1 ELSE 0 END) AS rushing_fumbles_lost, sum( CASE WHEN ps_1.is_rush_first_down THEN 1 ELSE 0 END) AS rushing_first_downs, sum( CASE WHEN ps_1.is_rush_2pt THEN 1 ELSE 0 END) AS rushing_2pt_conversions, sum( CASE WHEN ps_1.is_target THEN 1 ELSE 0 END) AS targets, sum( CASE WHEN ps_1.is_rec THEN 1 ELSE 0 END) AS receptions, sum( CASE WHEN ps_1.is_rec_td THEN 1 ELSE 0 END) AS receiving_tds, sum( CASE WHEN ps_1.is_rec_fumble THEN 1 ELSE 0 END) AS receiving_fumbles, sum( CASE WHEN ps_1.is_rec_fumble_lost THEN 1 ELSE 0 END) AS receiving_fumbles_lost, sum( CASE WHEN ps_1.is_rec_first_down THEN 1 ELSE 0 END) AS receiving_first_downs, sum( CASE WHEN ps_1.is_rec_2pt THEN 1 ELSE 0 END) AS receiving_2pt_conversions, sum( CASE WHEN ps_1.is_special_td THEN 1 ELSE 0 END) AS special_teams_tds, sum(ps_1.pass_yards) AS passing_yards, sum(ps_1.sack_yards) AS sack_yards, sum(ps_1.air_yards) AS passing_air_yards, sum(ps_1.air_yards_complete) AS qb_air_yards, sum(ps_1.rush_yards) AS rushing_yards, sum(ps_1.rec_yards) AS receiving_yards, sum(ps_1.yac) AS receiving_yards_after_catch, sum( CASE WHEN ps_1.pass_yards >= 20 THEN 1 ELSE 0 END) AS explosive_passes, sum( CASE WHEN ps_1.rush_yards > 10 THEN 1 ELSE 0 END) AS explosive_runs, sum( CASE WHEN ps_1.rec_yards >= 20 THEN 1 ELSE 0 END) AS explosive_receptions, sum( CASE WHEN ps_1.rush_yards >= 20 THEN 1 ELSE 0 END) AS explosive_scrambles, sum( CASE WHEN ps_1.is_target THEN ps_1.team_play_air_yards ELSE 0 END) AS receiving_air_yards, max(ps_1.team_game_targets) AS team_game_targets, max(ps_1.team_game_air_yards) AS team_game_air_yards, max(ps_1.player_name::text) AS player_name, max(ps_1.season_type::text) AS season_type, max(NULLIF( CASE WHEN ps_1.team::text = ps_1.off::text THEN ps_1.def ELSE ps_1.off END::text, 'NaN'::text)) AS opponent_team FROM playstats ps_1 JOIN ( SELECT players.gsis_id, players."position" FROM players WHERE players."position"::text = ANY (ARRAY['QB'::character varying, 'RB'::character varying, 'WR'::character varying, 'TE'::character varying]::text[])) pl ON ps_1.player_id::text = pl.gsis_id::text WHERE ps_1.player_id::text <> 'TEAM'::text GROUP BY ps_1.player_id, ps_1.game_id, ps_1.season, ps_1.week, ps_1.team ), passing_stats AS ( SELECT p.season, p.week, p.game_id, p.passer_player_id AS player_id, sum(p.qb_epa) AS passing_epa, avg(NULLIF(p.cpoe, 'NaN'::double precision)) AS passing_cpoe, count(NULLIF(p.cpoe, 'NaN'::double precision)) AS cpoe_count, sum(NULLIF(p.cpoe, 'NaN'::double precision)) AS total_cpoe, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_passes, count(p.passer_player_id) AS passes FROM plays p WHERE (p.play_type::text = ANY (ARRAY['pass'::character varying, 'qb_spike'::character varying]::text[])) AND p.passer_player_id IS NOT NULL GROUP BY p.season, p.week, p.game_id, p.passer_player_id ), rushing_stats AS ( SELECT p.season, p.week, p.game_id, p.rusher_player_id AS player_id, sum(p.epa) AS rushing_epa, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_rushes FROM plays p WHERE (p.play_type::text = ANY (ARRAY['run'::character varying, 'qb_kneel'::character varying]::text[])) AND p.rusher_player_id IS NOT NULL GROUP BY p.season, p.week, p.game_id, p.rusher_player_id ), receiving_stats AS ( SELECT p.season, p.week, p.game_id, p.receiver_player_id AS player_id, sum(p.epa) AS receiving_epa, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_receptions FROM plays p WHERE p.receiver_player_id IS NOT NULL GROUP BY p.season, p.week, p.game_id, p.receiver_player_id ), dropback_stats AS ( SELECT p.season, p.week, p.game_id, CASE WHEN p.qb_scramble = 1 THEN p.rusher_player_id ELSE p.passer_player_id END AS player_id, count(*) AS dropbacks, sum(p.qb_epa) AS dropback_epa, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_dropbacks FROM plays p WHERE p.qb_dropback = 1 AND (p.qb_scramble = 1 AND p.rusher_player_id IS NOT NULL OR p.passer_player_id IS NOT NULL) GROUP BY p.season, p.week, p.game_id, ( CASE WHEN p.qb_scramble = 1 THEN p.rusher_player_id ELSE p.passer_player_id END) ), scramble_stats AS ( SELECT p.season, p.week, p.game_id, p.rusher_player_id AS player_id, count(*) AS scrambles, sum(p.qb_epa) AS scramble_epa, sum(p.rushing_yards) AS scramble_yards, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_scrambles, sum( CASE WHEN p.first_down_rush = 1 THEN 1 ELSE 0 END) AS scramble_first_downs FROM plays p WHERE p.qb_scramble = 1 AND p.rusher_player_id IS NOT NULL GROUP BY p.season, p.week, p.game_id, p.rusher_player_id ) SELECT pa.game_id, pa.season, pa.week, pa.player_id, pa.player_name, pa.team, CASE WHEN pa.team::text = g.home_team::text THEN 'home'::text ELSE 'away'::text END AS home_away, pa.season_type, pa.opponent_team, pa."position", pa.total_plays, COALESCE(sc.offense_snaps, 0) AS plays, COALESCE(ps.passes, 0::bigint) + pa.carries AS qb_plays, pa.completions, pa.attempts, pa.passing_tds, pa.interceptions, pa.sacks, pa.passing_yards, pa.sack_yards, pa.passing_air_yards, pa.passing_first_downs, COALESCE(ps.passing_cpoe, 0::double precision) AS cpoe, COALESCE(ps.passes, 0::bigint) AS passes, pa.qb_targets, pa.qb_air_yards, COALESCE(ps.passing_epa, 0::double precision) AS passing_epa, COALESCE(ps.successful_passes, 0::double precision) AS successful_passes, COALESCE(ps.total_cpoe, 0::double precision) AS total_cpoe, COALESCE(ps.cpoe_count, 0::bigint) AS cpoe_count, COALESCE(ds.dropbacks, 0::bigint) AS dropbacks, COALESCE(ds.dropback_epa, 0::double precision) AS dropback_epa, COALESCE(ds.successful_dropbacks, 0::double precision) AS successful_dropbacks, COALESCE(ss.scrambles, 0::bigint) AS scrambles, COALESCE(ss.scramble_epa, 0::double precision) AS scramble_epa, COALESCE(ss.scramble_yards, 0::double precision) AS scramble_yards, COALESCE(ss.successful_scrambles, 0::double precision) AS successful_scrambles, COALESCE(ss.scramble_first_downs, 0::bigint) AS scramble_first_downs, pa.carries, pa.rushing_tds, pa.rushing_yards, pa.rushing_first_downs, COALESCE(rs.rushing_epa, 0::double precision) AS rushing_epa, COALESCE(rs.successful_rushes, 0::double precision) AS successful_rushes, pa.targets, pa.receptions, pa.receiving_tds, pa.receiving_yards, pa.receiving_yards_after_catch, pa.receiving_first_downs, pa.receiving_air_yards, COALESCE(recs.receiving_epa, 0::double precision) AS receiving_epa, COALESCE(recs.successful_receptions, 0::double precision) AS successful_receptions, pa.explosive_passes, pa.explosive_runs, pa.explosive_receptions, pa.explosive_scrambles, pa.sack_fumbles, pa.sack_fumbles_lost, pa.rushing_fumbles, pa.rushing_fumbles_lost, pa.receiving_fumbles, pa.receiving_fumbles_lost, pa.passing_2pt_conversions, pa.rushing_2pt_conversions, pa.receiving_2pt_conversions, pa.special_teams_tds, pa.team_game_targets, pa.team_game_air_yards, pa.carries + pa.receptions AS touches, pa.carries + pa.targets AS opportunities, COALESCE(ps.passing_epa, 0::double precision) + COALESCE(rs.rushing_epa, 0::double precision) + COALESCE(recs.receiving_epa, 0::double precision) AS total_epa FROM playstats_agg pa LEFT JOIN snap_counts sc ON pa.player_id::text = sc.gsis_id::text AND pa.game_id::text = sc.game_id::text LEFT JOIN passing_stats ps ON pa.player_id::text = ps.player_id::text AND pa.game_id::text = ps.game_id::text LEFT JOIN rushing_stats rs ON pa.player_id::text = rs.player_id::text AND pa.game_id::text = rs.game_id::text LEFT JOIN receiving_stats recs ON pa.player_id::text = recs.player_id::text AND pa.game_id::text = recs.game_id::text LEFT JOIN dropback_stats ds ON pa.player_id::text = ds.player_id::text AND pa.game_id::text = ds.game_id::text LEFT JOIN scramble_stats ss ON pa.player_id::text = ss.player_id::text AND pa.game_id::text = ss.game_id::text LEFT JOIN ( SELECT games.game_id, games.home_team, games.away_team FROM games) g ON pa.game_id::text = g.game_id::text`);

export const playerGameStatsWithMetrics = pgView("player_game_stats_with_metrics", {	gameId: varchar("game_id", { length: 50 }),
	season: integer(),
	week: integer(),
	playerId: varchar("player_id", { length: 50 }),
	playerName: text("player_name"),
	team: varchar({ length: 10 }),
	homeAway: text("home_away"),
	seasonType: text("season_type"),
	opponentTeam: text("opponent_team"),
	position: text(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	totalPlays: bigint("total_plays", { mode: "number" }),
	plays: integer(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	qbPlays: bigint("qb_plays", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	completions: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	attempts: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passingTds: bigint("passing_tds", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	interceptions: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sacks: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passingYards: bigint("passing_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sackYards: bigint("sack_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passingAirYards: bigint("passing_air_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passingFirstDowns: bigint("passing_first_downs", { mode: "number" }),
	cpoe: doublePrecision(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passes: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	qbTargets: bigint("qb_targets", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	qbAirYards: bigint("qb_air_yards", { mode: "number" }),
	passingEpa: doublePrecision("passing_epa"),
	successfulPasses: doublePrecision("successful_passes"),
	totalCpoe: doublePrecision("total_cpoe"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	cpoeCount: bigint("cpoe_count", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	dropbacks: bigint({ mode: "number" }),
	dropbackEpa: doublePrecision("dropback_epa"),
	successfulDropbacks: doublePrecision("successful_dropbacks"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	scrambles: bigint({ mode: "number" }),
	scrambleEpa: doublePrecision("scramble_epa"),
	scrambleYards: doublePrecision("scramble_yards"),
	successfulScrambles: doublePrecision("successful_scrambles"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	scrambleFirstDowns: bigint("scramble_first_downs", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	carries: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingTds: bigint("rushing_tds", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingYards: bigint("rushing_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingFirstDowns: bigint("rushing_first_downs", { mode: "number" }),
	rushingEpa: doublePrecision("rushing_epa"),
	successfulRushes: doublePrecision("successful_rushes"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	targets: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receptions: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingTds: bigint("receiving_tds", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingYards: bigint("receiving_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingYardsAfterCatch: bigint("receiving_yards_after_catch", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingFirstDowns: bigint("receiving_first_downs", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingAirYards: bigint("receiving_air_yards", { mode: "number" }),
	receivingEpa: doublePrecision("receiving_epa"),
	successfulReceptions: doublePrecision("successful_receptions"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	explosivePasses: bigint("explosive_passes", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	explosiveRuns: bigint("explosive_runs", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	explosiveReceptions: bigint("explosive_receptions", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	explosiveScrambles: bigint("explosive_scrambles", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sackFumbles: bigint("sack_fumbles", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	sackFumblesLost: bigint("sack_fumbles_lost", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingFumbles: bigint("rushing_fumbles", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushingFumblesLost: bigint("rushing_fumbles_lost", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingFumbles: bigint("receiving_fumbles", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receivingFumblesLost: bigint("receiving_fumbles_lost", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	passing2PtConversions: bigint("passing_2pt_conversions", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	rushing2PtConversions: bigint("rushing_2pt_conversions", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	receiving2PtConversions: bigint("receiving_2pt_conversions", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	specialTeamsTds: bigint("special_teams_tds", { mode: "number" }),
	teamGameTargets: integer("team_game_targets"),
	teamGameAirYards: integer("team_game_air_yards"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	touches: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	opportunities: bigint({ mode: "number" }),
	totalEpa: doublePrecision("total_epa"),
	completionPercentage: numeric("completion_percentage"),
	yardsPerAttempt: numeric("yards_per_attempt"),
	sackRate: numeric("sack_rate"),
	scrambleRate: numeric("scramble_rate"),
	qbAdot: numeric("qb_adot"),
	receiverAdot: numeric("receiver_adot"),
	yardsPerCarry: numeric("yards_per_carry"),
	catchRate: numeric("catch_rate"),
	yardsPerReception: numeric("yards_per_reception"),
	pacr: numeric(),
	racr: numeric(),
	targetShare: numeric("target_share"),
	airYardsShare: numeric("air_yards_share"),
	wopr: numeric(),
	successRate: numeric("success_rate"),
	passingSuccessRate: numeric("passing_success_rate"),
	dropbackSuccessRate: numeric("dropback_success_rate"),
	scrambleSuccessRate: numeric("scramble_success_rate"),
	rushingSuccessRate: numeric("rushing_success_rate"),
	targetSuccessRate: numeric("target_success_rate"),
	epaPerDropback: numeric("epa_per_dropback"),
	epaPerScramble: numeric("epa_per_scramble"),
	epaPerPlay: numeric("epa_per_play"),
	epaPerQbPlay: numeric("epa_per_qb_play"),
	epaPerPass: numeric("epa_per_pass"),
	epaPerCarry: numeric("epa_per_carry"),
	epaPerTarget: numeric("epa_per_target"),
	explosivePassRate: numeric("explosive_pass_rate"),
	explosiveRunRate: numeric("explosive_run_rate"),
	explosiveTargetRate: numeric("explosive_target_rate"),
	explosiveCatchRate: numeric("explosive_catch_rate"),
	explosiveScrambleRate: numeric("explosive_scramble_rate"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	totalYards: bigint("total_yards", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	totalTouchdowns: bigint("total_touchdowns", { mode: "number" }),
	rushTdPercentage: numeric("rush_td_percentage"),
	receivingTdPercentage: numeric("receiving_td_percentage"),
	epaPerReception: numeric("epa_per_reception"),
	passerRating: numeric("passer_rating"),
	passingFirstDownRate: numeric("passing_first_down_rate"),
	rushingFirstDownRate: numeric("rushing_first_down_rate"),
	receivingFirstDownRate: numeric("receiving_first_down_rate"),
	scrambleFirstDownRate: numeric("scramble_first_down_rate"),
	yardsPerTarget: numeric("yards_per_target"),
}).as(sql`SELECT game_id, season, week, player_id, player_name, team, home_away, season_type, opponent_team, "position", total_plays, plays, qb_plays, completions, attempts, passing_tds, interceptions, sacks, passing_yards, sack_yards, passing_air_yards, passing_first_downs, cpoe, passes, qb_targets, qb_air_yards, passing_epa, successful_passes, total_cpoe, cpoe_count, dropbacks, dropback_epa, successful_dropbacks, scrambles, scramble_epa, scramble_yards, successful_scrambles, scramble_first_downs, carries, rushing_tds, rushing_yards, rushing_first_downs, rushing_epa, successful_rushes, targets, receptions, receiving_tds, receiving_yards, receiving_yards_after_catch, receiving_first_downs, receiving_air_yards, receiving_epa, successful_receptions, explosive_passes, explosive_runs, explosive_receptions, explosive_scrambles, sack_fumbles, sack_fumbles_lost, rushing_fumbles, rushing_fumbles_lost, receiving_fumbles, receiving_fumbles_lost, passing_2pt_conversions, rushing_2pt_conversions, receiving_2pt_conversions, special_teams_tds, team_game_targets, team_game_air_yards, touches, opportunities, total_epa, CASE WHEN attempts > 0 THEN round(completions::numeric / attempts::numeric * 100::numeric, 1) ELSE NULL::numeric END AS completion_percentage, CASE WHEN attempts > 0 THEN round(passing_yards::numeric / attempts::numeric, 1) ELSE NULL::numeric END AS yards_per_attempt, CASE WHEN dropbacks > 0 THEN round(sacks::numeric / dropbacks::numeric * 100::numeric, 1) ELSE NULL::numeric END AS sack_rate, CASE WHEN dropbacks > 0 THEN round(scrambles::numeric / dropbacks::numeric * 100::numeric, 1) ELSE NULL::numeric END AS scramble_rate, CASE WHEN qb_targets > 0 THEN round(qb_air_yards::numeric / qb_targets::numeric, 1) ELSE NULL::numeric END AS qb_adot, CASE WHEN targets > 0 THEN round(receiving_air_yards::numeric / targets::numeric, 1) ELSE NULL::numeric END AS receiver_adot, CASE WHEN carries > 0 THEN round(rushing_yards::numeric / carries::numeric, 1) ELSE NULL::numeric END AS yards_per_carry, CASE WHEN targets > 0 THEN round(receptions::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS catch_rate, CASE WHEN receptions > 0 THEN round(receiving_yards::numeric / receptions::numeric, 1) ELSE NULL::numeric END AS yards_per_reception, CASE WHEN passing_air_yards > 0 THEN round(passing_yards::numeric / passing_air_yards::numeric, 3) ELSE NULL::numeric END AS pacr, CASE WHEN receiving_air_yards > 0 THEN round(receiving_yards::numeric / receiving_air_yards::numeric, 3) ELSE NULL::numeric END AS racr, CASE WHEN team_game_targets > 0 THEN round(targets::numeric / team_game_targets::numeric, 3) ELSE NULL::numeric END AS target_share, CASE WHEN team_game_air_yards > 0 THEN round(receiving_air_yards::numeric / team_game_air_yards::numeric, 3) ELSE NULL::numeric END AS air_yards_share, CASE WHEN team_game_targets > 0 AND team_game_air_yards > 0 THEN round(1.5 * (targets::numeric / team_game_targets::numeric) + 0.7 * (receiving_air_yards::numeric / team_game_air_yards::numeric), 3) ELSE NULL::numeric END AS wopr, CASE WHEN qb_plays > 0 THEN round((successful_passes::numeric + successful_rushes::numeric) / qb_plays::numeric * 100::numeric, 1) ELSE NULL::numeric END AS success_rate, CASE WHEN passes > 0 THEN round(successful_passes::numeric / passes::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passing_success_rate, CASE WHEN dropbacks > 0 THEN round(successful_dropbacks::numeric / dropbacks::numeric * 100::numeric, 1) ELSE NULL::numeric END AS dropback_success_rate, CASE WHEN scrambles > 0 THEN round(successful_scrambles::numeric / scrambles::numeric * 100::numeric, 1) ELSE NULL::numeric END AS scramble_success_rate, CASE WHEN carries > 0 THEN round(successful_rushes::numeric / carries::numeric * 100::numeric, 1) ELSE NULL::numeric END AS rushing_success_rate, CASE WHEN targets > 0 THEN round(successful_receptions::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS target_success_rate, CASE WHEN dropbacks > 0 THEN round(dropback_epa::numeric / dropbacks::numeric, 2) ELSE NULL::numeric END AS epa_per_dropback, CASE WHEN scrambles > 0 THEN round(scramble_epa::numeric / scrambles::numeric, 2) ELSE NULL::numeric END AS epa_per_scramble, CASE WHEN plays > 0 THEN round((passing_epa + rushing_epa + receiving_epa)::numeric / plays::numeric, 2) ELSE NULL::numeric END AS epa_per_play, CASE WHEN qb_plays > 0 THEN round((passing_epa + rushing_epa)::numeric / qb_plays::numeric, 2) ELSE NULL::numeric END AS epa_per_qb_play, CASE WHEN passes > 0 THEN round(passing_epa::numeric / passes::numeric, 2) ELSE NULL::numeric END AS epa_per_pass, CASE WHEN carries > 0 THEN round(rushing_epa::numeric / carries::numeric, 2) ELSE NULL::numeric END AS epa_per_carry, CASE WHEN targets > 0 THEN round(receiving_epa::numeric / targets::numeric, 2) ELSE NULL::numeric END AS epa_per_target, CASE WHEN passes > 0 THEN round(explosive_passes::numeric / passes::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_pass_rate, CASE WHEN carries > 0 THEN round(explosive_runs::numeric / carries::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_run_rate, CASE WHEN targets > 0 THEN round(explosive_receptions::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_target_rate, CASE WHEN receptions > 0 THEN round(explosive_receptions::numeric / receptions::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_catch_rate, CASE WHEN scrambles > 0 THEN round(explosive_scrambles::numeric / scrambles::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_scramble_rate, passing_yards + rushing_yards + receiving_yards AS total_yards, passing_tds + rushing_tds + receiving_tds AS total_touchdowns, CASE WHEN carries > 0 THEN round(rushing_tds::numeric / carries::numeric * 100::numeric, 1) ELSE NULL::numeric END AS rush_td_percentage, CASE WHEN targets > 0 THEN round(receiving_tds::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS receiving_td_percentage, CASE WHEN receptions > 0 THEN round(receiving_epa::numeric / receptions::numeric, 2) ELSE NULL::numeric END AS epa_per_reception, CASE WHEN attempts > 0 THEN round(((completions::numeric / attempts::numeric * 100::numeric - 30::numeric) / 20::numeric + (passing_yards::numeric / attempts::numeric - 3::numeric) / 4::numeric + passing_tds::numeric / attempts::numeric * 20::numeric + 2.375 - interceptions::numeric / attempts::numeric * 25::numeric) / 6::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passer_rating, CASE WHEN attempts > 0 THEN round(passing_first_downs::numeric / attempts::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passing_first_down_rate, CASE WHEN carries > 0 THEN round(rushing_first_downs::numeric / carries::numeric * 100::numeric, 1) ELSE NULL::numeric END AS rushing_first_down_rate, CASE WHEN targets > 0 THEN round(receiving_first_downs::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS receiving_first_down_rate, CASE WHEN scrambles > 0 THEN round(scramble_first_downs::numeric / scrambles::numeric * 100::numeric, 1) ELSE NULL::numeric END AS scramble_first_down_rate, CASE WHEN targets > 0 THEN round(passing_yards::numeric / targets::numeric, 1) ELSE NULL::numeric END AS yards_per_target FROM player_game_stats pgs`);

export const playerRelevance = pgMaterializedView("player_relevance", {	playerId: varchar("player_id", { length: 50 }),
	displayName: varchar("display_name", { length: 100 }),
	lastName: varchar("last_name", { length: 50 }),
	position: text(),
	compositeScore: doublePrecision("composite_score"),
	normalizedCompositeScore: doublePrecision("normalized_composite_score"),
}).as(sql`WITH recent_szn AS ( SELECT max(games.season) AS szn FROM games WHERE games.game_type::text = 'SB'::text ), career_stats AS ( SELECT player_season_stats_with_metrics.player_id, player_season_stats_with_metrics."position", log(GREATEST(sum(player_season_stats_with_metrics.total_yards), 0::numeric) + 1.0) * 0.125 * CASE WHEN player_season_stats_with_metrics."position" = 'QB'::text THEN 0.9 ELSE 1::numeric END AS career_l1, log(sum(player_season_stats_with_metrics.total_touchdowns) + 1.0) * 2.5 * CASE WHEN player_season_stats_with_metrics."position" = 'QB'::text THEN 0.85 ELSE 1::numeric END AS career_l2, log(GREATEST(sum(player_season_stats_with_metrics.total_epa), 0::double precision) + 1.0::double precision) * 2.0::double precision AS career_l3, log(sum(player_season_stats_with_metrics.touches) + 1.0) * 1.5 AS career_l4 FROM player_season_stats_with_metrics WHERE player_season_stats_with_metrics.season < (( SELECT recent_szn.szn FROM recent_szn)) GROUP BY player_season_stats_with_metrics.player_id, player_season_stats_with_metrics."position" ), recent_stats AS ( SELECT player_season_stats_with_metrics.player_id, player_season_stats_with_metrics."position", log(GREATEST(sum(player_season_stats_with_metrics.total_yards), 0::numeric) + 1.0) * 0.75 * CASE WHEN player_season_stats_with_metrics."position" = 'QB'::text THEN 0.9 ELSE 1::numeric END AS recent_l1, log(sum(player_season_stats_with_metrics.total_touchdowns) + 1.0) * 1.25 * CASE WHEN player_season_stats_with_metrics."position" = 'QB'::text THEN 0.85 ELSE 1::numeric END AS recent_l2, log(GREATEST(sum(player_season_stats_with_metrics.total_epa), 0::double precision) + 1.0::double precision) * 1.0::double precision AS recent_l3, log(sum(player_season_stats_with_metrics.touches) + 1.0) * 0.67 AS recent_l4 FROM player_season_stats_with_metrics WHERE player_season_stats_with_metrics.season = (( SELECT recent_szn.szn FROM recent_szn)) GROUP BY player_season_stats_with_metrics.player_id, player_season_stats_with_metrics."position" ), composite_score AS ( SELECT p.gsis_id AS player_id, p.display_name, p.last_name, COALESCE(r."position", c."position") AS "position", CASE WHEN p.rookie_year > (( SELECT recent_szn.szn FROM recent_szn)) AND p.draftround = 1 THEN 15::double precision WHEN p.rookie_year > (( SELECT recent_szn.szn FROM recent_szn)) AND p.draftround = 2 THEN 10::double precision WHEN p.rookie_year > (( SELECT recent_szn.szn FROM recent_szn)) THEN 5::double precision ELSE (1.5::double precision * COALESCE((r.recent_l1 + r.recent_l2)::double precision + r.recent_l3 + r.recent_l4::double precision, 0::double precision) + 1.0::double precision * COALESCE((c.career_l1 + c.career_l2)::double precision + c.career_l3 + c.career_l4::double precision, 0::double precision)) * CASE WHEN p.rookie_year = (( SELECT recent_szn.szn FROM recent_szn)) THEN 2 ELSE 1 END::double precision END AS composite_score FROM players p LEFT JOIN recent_stats r ON p.gsis_id::text = r.player_id::text LEFT JOIN career_stats c ON p.gsis_id::text = c.player_id::text ), normalized_composite_score AS ( SELECT rs.player_id, rs.display_name, rs.last_name, rs."position", rs.composite_score, CASE WHEN (max(rs.composite_score) OVER () - min(rs.composite_score) OVER ()) > 0::double precision THEN (rs.composite_score - min(rs.composite_score) OVER ()) / (max(rs.composite_score) OVER () - min(rs.composite_score) OVER ()) ELSE 0.5::double precision END AS normalized_composite_score FROM composite_score rs ) SELECT player_id, display_name, last_name, "position", composite_score, normalized_composite_score FROM normalized_composite_score`);

export const playerSeasonStats = pgView("player_season_stats", {	playerId: varchar("player_id", { length: 50 }),
	playerName: text("player_name"),
	season: integer(),
	seasonType: text("season_type"),
	team: varchar(),
	position: text(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	gamesPlayed: bigint("games_played", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	plays: bigint({ mode: "number" }),
	qbPlays: numeric("qb_plays"),
	completions: numeric(),
	attempts: numeric(),
	passingYards: numeric("passing_yards"),
	passingTds: numeric("passing_tds"),
	interceptions: numeric(),
	sacks: numeric(),
	sackYards: numeric("sack_yards"),
	passingAirYards: numeric("passing_air_yards"),
	passingYardsAfterCatch: numeric("passing_yards_after_catch"),
	passes: numeric(),
	sackFumbles: numeric("sack_fumbles"),
	sackFumblesLost: numeric("sack_fumbles_lost"),
	carries: numeric(),
	rushingYards: numeric("rushing_yards"),
	rushingTds: numeric("rushing_tds"),
	rushingFumbles: numeric("rushing_fumbles"),
	rushingFumblesLost: numeric("rushing_fumbles_lost"),
	rushingFirstDowns: numeric("rushing_first_downs"),
	targets: numeric(),
	receptions: numeric(),
	receivingYards: numeric("receiving_yards"),
	receivingTds: numeric("receiving_tds"),
	receivingFumbles: numeric("receiving_fumbles"),
	receivingFumblesLost: numeric("receiving_fumbles_lost"),
	receivingAirYards: numeric("receiving_air_yards"),
	receivingYardsAfterCatch: numeric("receiving_yards_after_catch"),
	receivingFirstDowns: numeric("receiving_first_downs"),
	scrambles: numeric(),
	scrambleYards: doublePrecision("scramble_yards"),
	scrambleFirstDowns: numeric("scramble_first_downs"),
	qbTargets: numeric("qb_targets"),
	qbAirYards: numeric("qb_air_yards"),
	dropbacks: numeric(),
	totalCpoe: doublePrecision("total_cpoe"),
	cpoeCount: numeric("cpoe_count"),
	explosivePasses: numeric("explosive_passes"),
	explosiveRuns: numeric("explosive_runs"),
	explosiveReceptions: numeric("explosive_receptions"),
	explosiveScrambles: numeric("explosive_scrambles"),
	touches: numeric(),
	opportunities: numeric(),
	passingFirstDowns: numeric("passing_first_downs"),
	successfulPasses: doublePrecision("successful_passes"),
	successfulRushes: doublePrecision("successful_rushes"),
	successfulReceptions: doublePrecision("successful_receptions"),
	successfulDropbacks: doublePrecision("successful_dropbacks"),
	successfulScrambles: doublePrecision("successful_scrambles"),
	totalEpa: doublePrecision("total_epa"),
	passingEpa: doublePrecision("passing_epa"),
	rushingEpa: doublePrecision("rushing_epa"),
	receivingEpa: doublePrecision("receiving_epa"),
	dropbackEpa: doublePrecision("dropback_epa"),
	scrambleEpa: doublePrecision("scramble_epa"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	teamSeasonTargets: bigint("team_season_targets", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	teamSeasonAirYards: bigint("team_season_air_yards", { mode: "number" }),
}).as(sql`SELECT player_id, max(player_name) AS player_name, season, season_type, (array_agg(team ORDER BY week DESC))[1] AS team, max("position") AS "position", count(DISTINCT game_id) AS games_played, sum(plays) AS plays, sum(qb_plays) AS qb_plays, sum(completions) AS completions, sum(attempts) AS attempts, sum(passing_yards) AS passing_yards, sum(passing_tds) AS passing_tds, sum(interceptions) AS interceptions, sum(sacks) AS sacks, sum(sack_yards) AS sack_yards, sum(passing_air_yards) AS passing_air_yards, sum(passing_yards) - sum(qb_air_yards) AS passing_yards_after_catch, sum(passes) AS passes, sum(sack_fumbles) AS sack_fumbles, sum(sack_fumbles_lost) AS sack_fumbles_lost, sum(carries) AS carries, sum(rushing_yards) AS rushing_yards, sum(rushing_tds) AS rushing_tds, sum(rushing_fumbles) AS rushing_fumbles, sum(rushing_fumbles_lost) AS rushing_fumbles_lost, sum(rushing_first_downs) AS rushing_first_downs, sum(targets) AS targets, sum(receptions) AS receptions, sum(receiving_yards) AS receiving_yards, sum(receiving_tds) AS receiving_tds, sum(receiving_fumbles) AS receiving_fumbles, sum(receiving_fumbles_lost) AS receiving_fumbles_lost, sum(receiving_air_yards) AS receiving_air_yards, sum(receiving_yards_after_catch) AS receiving_yards_after_catch, sum(receiving_first_downs) AS receiving_first_downs, sum(scrambles) AS scrambles, sum(scramble_yards) AS scramble_yards, sum(scramble_first_downs) AS scramble_first_downs, sum(qb_targets) AS qb_targets, sum(qb_air_yards) AS qb_air_yards, sum(dropbacks) AS dropbacks, sum(total_cpoe) AS total_cpoe, sum(cpoe_count) AS cpoe_count, sum(explosive_passes) AS explosive_passes, sum(explosive_runs) AS explosive_runs, sum(explosive_receptions) AS explosive_receptions, sum(explosive_scrambles) AS explosive_scrambles, sum(touches) AS touches, sum(opportunities) AS opportunities, sum(passing_first_downs) AS passing_first_downs, sum(successful_passes) AS successful_passes, sum(successful_rushes) AS successful_rushes, sum(successful_receptions) AS successful_receptions, sum(successful_dropbacks) AS successful_dropbacks, sum(successful_scrambles) AS successful_scrambles, sum(total_epa) AS total_epa, sum(passing_epa) AS passing_epa, sum(rushing_epa) AS rushing_epa, sum(receiving_epa) AS receiving_epa, sum(dropback_epa) AS dropback_epa, sum(scramble_epa) AS scramble_epa, sum(team_game_targets) AS team_season_targets, sum(team_game_air_yards) AS team_season_air_yards FROM player_game_stats GROUP BY player_id, season, season_type`);

export const playerSeasonStatsWithMetrics = pgView("player_season_stats_with_metrics", {	playerId: varchar("player_id", { length: 50 }),
	playerName: text("player_name"),
	season: integer(),
	seasonType: text("season_type"),
	team: varchar(),
	position: text(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	gamesPlayed: bigint("games_played", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	plays: bigint({ mode: "number" }),
	qbPlays: numeric("qb_plays"),
	completions: numeric(),
	attempts: numeric(),
	passingYards: numeric("passing_yards"),
	passingTds: numeric("passing_tds"),
	interceptions: numeric(),
	sacks: numeric(),
	sackYards: numeric("sack_yards"),
	passingAirYards: numeric("passing_air_yards"),
	passingYardsAfterCatch: numeric("passing_yards_after_catch"),
	passes: numeric(),
	sackFumbles: numeric("sack_fumbles"),
	sackFumblesLost: numeric("sack_fumbles_lost"),
	carries: numeric(),
	rushingYards: numeric("rushing_yards"),
	rushingTds: numeric("rushing_tds"),
	rushingFumbles: numeric("rushing_fumbles"),
	rushingFumblesLost: numeric("rushing_fumbles_lost"),
	rushingFirstDowns: numeric("rushing_first_downs"),
	targets: numeric(),
	receptions: numeric(),
	receivingYards: numeric("receiving_yards"),
	receivingTds: numeric("receiving_tds"),
	receivingFumbles: numeric("receiving_fumbles"),
	receivingFumblesLost: numeric("receiving_fumbles_lost"),
	receivingAirYards: numeric("receiving_air_yards"),
	receivingYardsAfterCatch: numeric("receiving_yards_after_catch"),
	receivingFirstDowns: numeric("receiving_first_downs"),
	scrambles: numeric(),
	scrambleYards: doublePrecision("scramble_yards"),
	scrambleFirstDowns: numeric("scramble_first_downs"),
	qbTargets: numeric("qb_targets"),
	qbAirYards: numeric("qb_air_yards"),
	dropbacks: numeric(),
	totalCpoe: doublePrecision("total_cpoe"),
	cpoeCount: numeric("cpoe_count"),
	explosivePasses: numeric("explosive_passes"),
	explosiveRuns: numeric("explosive_runs"),
	explosiveReceptions: numeric("explosive_receptions"),
	explosiveScrambles: numeric("explosive_scrambles"),
	touches: numeric(),
	opportunities: numeric(),
	passingFirstDowns: numeric("passing_first_downs"),
	successfulPasses: doublePrecision("successful_passes"),
	successfulRushes: doublePrecision("successful_rushes"),
	successfulReceptions: doublePrecision("successful_receptions"),
	successfulDropbacks: doublePrecision("successful_dropbacks"),
	successfulScrambles: doublePrecision("successful_scrambles"),
	totalEpa: doublePrecision("total_epa"),
	passingEpa: doublePrecision("passing_epa"),
	rushingEpa: doublePrecision("rushing_epa"),
	receivingEpa: doublePrecision("receiving_epa"),
	dropbackEpa: doublePrecision("dropback_epa"),
	scrambleEpa: doublePrecision("scramble_epa"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	teamSeasonTargets: bigint("team_season_targets", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	teamSeasonAirYards: bigint("team_season_air_yards", { mode: "number" }),
	completionsPerGame: numeric("completions_per_game"),
	attemptsPerGame: numeric("attempts_per_game"),
	passingYardsPerGame: numeric("passing_yards_per_game"),
	carriesPerGame: numeric("carries_per_game"),
	rushingYardsPerGame: numeric("rushing_yards_per_game"),
	targetsPerGame: numeric("targets_per_game"),
	receptionsPerGame: numeric("receptions_per_game"),
	receivingYardsPerGame: numeric("receiving_yards_per_game"),
	touchesPerGame: numeric("touches_per_game"),
	opportunitiesPerGame: numeric("opportunities_per_game"),
	completionPercentage: numeric("completion_percentage"),
	yardsPerAttempt: numeric("yards_per_attempt"),
	yardsPerCompletion: numeric("yards_per_completion"),
	tdPercentage: numeric("td_percentage"),
	intPercentage: numeric("int_percentage"),
	sackRate: numeric("sack_rate"),
	scrambleRate: numeric("scramble_rate"),
	cpoe: numeric(),
	qbAdot: numeric("qb_adot"),
	receiverAdot: numeric("receiver_adot"),
	yardsPerCarry: numeric("yards_per_carry"),
	rushTdPercentage: numeric("rush_td_percentage"),
	catchRate: numeric("catch_rate"),
	yardsPerReception: numeric("yards_per_reception"),
	yardsPerTarget: numeric("yards_per_target"),
	receivingTdPercentage: numeric("receiving_td_percentage"),
	pacr: numeric(),
	racr: numeric(),
	targetShare: numeric("target_share"),
	airYardsShare: numeric("air_yards_share"),
	wopr: numeric(),
	successRate: numeric("success_rate"),
	passingSuccessRate: numeric("passing_success_rate"),
	dropbackSuccessRate: numeric("dropback_success_rate"),
	scrambleSuccessRate: numeric("scramble_success_rate"),
	rushingSuccessRate: numeric("rushing_success_rate"),
	targetSuccessRate: numeric("target_success_rate"),
	epaPerDropback: numeric("epa_per_dropback"),
	epaPerScramble: numeric("epa_per_scramble"),
	epaPerCarry: numeric("epa_per_carry"),
	epaPerTarget: numeric("epa_per_target"),
	epaPerReception: numeric("epa_per_reception"),
	epaPerPlay: numeric("epa_per_play"),
	epaPerQbPlay: numeric("epa_per_qb_play"),
	epaPerPass: numeric("epa_per_pass"),
	totalYards: numeric("total_yards"),
	totalTouchdowns: numeric("total_touchdowns"),
	yardsPerGame: numeric("yards_per_game"),
	passerRating: numeric("passer_rating"),
	passingFirstDownRate: numeric("passing_first_down_rate"),
	rushingFirstDownRate: numeric("rushing_first_down_rate"),
	receivingFirstDownRate: numeric("receiving_first_down_rate"),
	scrambleFirstDownRate: numeric("scramble_first_down_rate"),
	explosivePassRate: numeric("explosive_pass_rate"),
	explosiveRunRate: numeric("explosive_run_rate"),
	explosiveTargetRate: numeric("explosive_target_rate"),
	explosiveCatchRate: numeric("explosive_catch_rate"),
	explosiveScrambleRate: numeric("explosive_scramble_rate"),
}).as(sql`SELECT player_id, player_name, season, season_type, team, "position", games_played, plays, qb_plays, completions, attempts, passing_yards, passing_tds, interceptions, sacks, sack_yards, passing_air_yards, passing_yards_after_catch, passes, sack_fumbles, sack_fumbles_lost, carries, rushing_yards, rushing_tds, rushing_fumbles, rushing_fumbles_lost, rushing_first_downs, targets, receptions, receiving_yards, receiving_tds, receiving_fumbles, receiving_fumbles_lost, receiving_air_yards, receiving_yards_after_catch, receiving_first_downs, scrambles, scramble_yards, scramble_first_downs, qb_targets, qb_air_yards, dropbacks, total_cpoe, cpoe_count, explosive_passes, explosive_runs, explosive_receptions, explosive_scrambles, touches, opportunities, passing_first_downs, successful_passes, successful_rushes, successful_receptions, successful_dropbacks, successful_scrambles, total_epa, passing_epa, rushing_epa, receiving_epa, dropback_epa, scramble_epa, team_season_targets, team_season_air_yards, round(completions / games_played::numeric, 1) AS completions_per_game, round(attempts / games_played::numeric, 1) AS attempts_per_game, round(passing_yards / games_played::numeric, 1) AS passing_yards_per_game, round(carries / games_played::numeric, 1) AS carries_per_game, round(rushing_yards / games_played::numeric, 1) AS rushing_yards_per_game, round(targets / games_played::numeric, 1) AS targets_per_game, round(receptions / games_played::numeric, 1) AS receptions_per_game, round(receiving_yards / games_played::numeric, 1) AS receiving_yards_per_game, round(touches / games_played::numeric, 1) AS touches_per_game, round(opportunities / games_played::numeric, 1) AS opportunities_per_game, CASE WHEN attempts > 0::numeric THEN round(completions / attempts * 100::numeric, 1) ELSE NULL::numeric END AS completion_percentage, CASE WHEN attempts > 0::numeric THEN round(passing_yards / attempts, 1) ELSE NULL::numeric END AS yards_per_attempt, CASE WHEN completions > 0::numeric THEN round(passing_yards / completions, 1) ELSE NULL::numeric END AS yards_per_completion, CASE WHEN attempts > 0::numeric THEN round(passing_tds / attempts * 100::numeric, 1) ELSE NULL::numeric END AS td_percentage, CASE WHEN attempts > 0::numeric THEN round(interceptions / attempts * 100::numeric, 1) ELSE NULL::numeric END AS int_percentage, CASE WHEN dropbacks > 0::numeric THEN round(sacks / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS sack_rate, CASE WHEN dropbacks > 0::numeric THEN round(scrambles / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS scramble_rate, CASE WHEN cpoe_count > 0::numeric THEN round(total_cpoe::numeric / cpoe_count, 1) ELSE NULL::numeric END AS cpoe, CASE WHEN attempts > 0::numeric THEN round(passing_air_yards / attempts, 1) ELSE NULL::numeric END AS qb_adot, CASE WHEN targets > 0::numeric THEN round(receiving_air_yards / targets, 1) ELSE NULL::numeric END AS receiver_adot, CASE WHEN carries > 0::numeric THEN round(rushing_yards / carries, 1) ELSE NULL::numeric END AS yards_per_carry, CASE WHEN carries > 0::numeric THEN round(rushing_tds / carries * 100::numeric, 1) ELSE NULL::numeric END AS rush_td_percentage, CASE WHEN targets > 0::numeric THEN round(receptions / targets * 100::numeric, 1) ELSE NULL::numeric END AS catch_rate, CASE WHEN receptions > 0::numeric THEN round(receiving_yards / receptions, 1) ELSE NULL::numeric END AS yards_per_reception, CASE WHEN targets > 0::numeric THEN round(receiving_yards / targets, 1) ELSE NULL::numeric END AS yards_per_target, CASE WHEN targets > 0::numeric THEN round(receiving_tds / targets * 100::numeric, 1) ELSE NULL::numeric END AS receiving_td_percentage, CASE WHEN passing_air_yards > 0::numeric THEN round(passing_yards / passing_air_yards, 3) ELSE NULL::numeric END AS pacr, CASE WHEN receiving_air_yards > 0::numeric THEN round(receiving_yards / receiving_air_yards, 3) ELSE NULL::numeric END AS racr, CASE WHEN team_season_targets > 0 THEN round(targets / team_season_targets::numeric, 3) ELSE NULL::numeric END AS target_share, CASE WHEN team_season_air_yards > 0 THEN round(receiving_air_yards / team_season_air_yards::numeric, 3) ELSE NULL::numeric END AS air_yards_share, CASE WHEN team_season_targets > 0 AND team_season_air_yards > 0 THEN round(1.5 * (targets / team_season_targets::numeric) + 0.7 * (receiving_air_yards / team_season_air_yards::numeric), 3) ELSE NULL::numeric END AS wopr, CASE WHEN qb_plays > 0::numeric THEN round((successful_passes::numeric + successful_rushes::numeric) / qb_plays * 100::numeric, 1) ELSE NULL::numeric END AS success_rate, CASE WHEN passes > 0::numeric THEN round(successful_passes::numeric / passes * 100::numeric, 1) ELSE NULL::numeric END AS passing_success_rate, CASE WHEN dropbacks > 0::numeric THEN round(successful_dropbacks::numeric / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS dropback_success_rate, CASE WHEN scrambles > 0::numeric THEN round(successful_scrambles::numeric / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS scramble_success_rate, CASE WHEN carries > 0::numeric THEN round(successful_rushes::numeric / carries * 100::numeric, 1) ELSE NULL::numeric END AS rushing_success_rate, CASE WHEN targets > 0::numeric THEN round(successful_receptions::numeric / targets * 100::numeric, 1) ELSE NULL::numeric END AS target_success_rate, CASE WHEN dropbacks > 0::numeric THEN round(dropback_epa::numeric / dropbacks, 3) ELSE NULL::numeric END AS epa_per_dropback, CASE WHEN scrambles > 0::numeric THEN round(scramble_epa::numeric / scrambles, 3) ELSE NULL::numeric END AS epa_per_scramble, CASE WHEN carries > 0::numeric THEN round(rushing_epa::numeric / carries, 3) ELSE NULL::numeric END AS epa_per_carry, CASE WHEN targets > 0::numeric THEN round(receiving_epa::numeric / targets, 3) ELSE NULL::numeric END AS epa_per_target, CASE WHEN receptions > 0::numeric THEN round(receiving_epa::numeric / receptions, 3) ELSE NULL::numeric END AS epa_per_reception, CASE WHEN plays > 0 THEN round(total_epa::numeric / plays::numeric, 3) ELSE NULL::numeric END AS epa_per_play, CASE WHEN qb_plays > 0::numeric THEN round((passing_epa + rushing_epa)::numeric / qb_plays, 3) ELSE NULL::numeric END AS epa_per_qb_play, CASE WHEN passes > 0::numeric THEN round(passing_epa::numeric / passes, 3) ELSE NULL::numeric END AS epa_per_pass, passing_yards + rushing_yards + receiving_yards AS total_yards, passing_tds + rushing_tds + receiving_tds AS total_touchdowns, round((passing_yards + rushing_yards + receiving_yards) / games_played::numeric, 1) AS yards_per_game, CASE WHEN attempts >= 1::numeric THEN round(((completions / attempts * 100::numeric - 30::numeric) / 20::numeric + (passing_yards / attempts - 3::numeric) / 4::numeric + passing_tds / attempts * 20::numeric + 2.375 - interceptions / attempts * 25::numeric) / 6::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passer_rating, CASE WHEN attempts > 0::numeric THEN round(passing_first_downs / attempts * 100::numeric, 1) ELSE NULL::numeric END AS passing_first_down_rate, CASE WHEN carries > 0::numeric THEN round(rushing_first_downs / carries * 100::numeric, 1) ELSE NULL::numeric END AS rushing_first_down_rate, CASE WHEN targets > 0::numeric THEN round(receiving_first_downs / targets * 100::numeric, 1) ELSE NULL::numeric END AS receiving_first_down_rate, CASE WHEN scrambles > 0::numeric THEN round(scramble_first_downs / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS scramble_first_down_rate, CASE WHEN passes > 0::numeric THEN round(explosive_passes / passes * 100::numeric, 1) ELSE NULL::numeric END AS explosive_pass_rate, CASE WHEN carries > 0::numeric THEN round(explosive_runs / carries * 100::numeric, 1) ELSE NULL::numeric END AS explosive_run_rate, CASE WHEN targets > 0::numeric THEN round(explosive_receptions / targets * 100::numeric, 1) ELSE NULL::numeric END AS explosive_target_rate, CASE WHEN receptions > 0::numeric THEN round(explosive_receptions / receptions * 100::numeric, 1) ELSE NULL::numeric END AS explosive_catch_rate, CASE WHEN scrambles > 0::numeric THEN round(explosive_scrambles / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS explosive_scramble_rate FROM player_season_stats ps`);

export const playerCareerStats = pgView("player_career_stats", {	playerId: varchar("player_id", { length: 50 }),
	playerName: text("player_name"),
	seasonType: text("season_type"),
	team: varchar(),
	firstSeason: integer("first_season"),
	lastSeason: integer("last_season"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	seasonsPlayed: bigint("seasons_played", { mode: "number" }),
	position: text(),
	gamesPlayed: numeric("games_played"),
	plays: numeric(),
	qbPlays: numeric("qb_plays"),
	completions: numeric(),
	attempts: numeric(),
	passingYards: numeric("passing_yards"),
	passingTds: numeric("passing_tds"),
	interceptions: numeric(),
	sacks: numeric(),
	sackYards: numeric("sack_yards"),
	passingAirYards: numeric("passing_air_yards"),
	passingYardsAfterCatch: numeric("passing_yards_after_catch"),
	passes: numeric(),
	carries: numeric(),
	rushingYards: numeric("rushing_yards"),
	rushingTds: numeric("rushing_tds"),
	rushingFumbles: numeric("rushing_fumbles"),
	rushingFumblesLost: numeric("rushing_fumbles_lost"),
	rushingFirstDowns: numeric("rushing_first_downs"),
	sackFumbles: numeric("sack_fumbles"),
	sackFumblesLost: numeric("sack_fumbles_lost"),
	targets: numeric(),
	receptions: numeric(),
	receivingYards: numeric("receiving_yards"),
	receivingTds: numeric("receiving_tds"),
	receivingFumbles: numeric("receiving_fumbles"),
	receivingFumblesLost: numeric("receiving_fumbles_lost"),
	receivingAirYards: numeric("receiving_air_yards"),
	receivingYardsAfterCatch: numeric("receiving_yards_after_catch"),
	receivingFirstDowns: numeric("receiving_first_downs"),
	dropbacks: numeric(),
	totalCpoe: doublePrecision("total_cpoe"),
	cpoeCount: numeric("cpoe_count"),
	scrambles: numeric(),
	scrambleYards: doublePrecision("scramble_yards"),
	scrambleFirstDowns: numeric("scramble_first_downs"),
	passingFirstDowns: numeric("passing_first_downs"),
	explosivePasses: numeric("explosive_passes"),
	explosiveRuns: numeric("explosive_runs"),
	explosiveReceptions: numeric("explosive_receptions"),
	explosiveScrambles: numeric("explosive_scrambles"),
	successfulPasses: doublePrecision("successful_passes"),
	successfulDropbacks: doublePrecision("successful_dropbacks"),
	successfulScrambles: doublePrecision("successful_scrambles"),
	successfulRushes: doublePrecision("successful_rushes"),
	successfulReceptions: doublePrecision("successful_receptions"),
	qbTargets: numeric("qb_targets"),
	qbAirYards: numeric("qb_air_yards"),
	totalEpa: doublePrecision("total_epa"),
	passingEpa: doublePrecision("passing_epa"),
	rushingEpa: doublePrecision("rushing_epa"),
	receivingEpa: doublePrecision("receiving_epa"),
	dropbackEpa: doublePrecision("dropback_epa"),
	scrambleEpa: doublePrecision("scramble_epa"),
	touches: numeric(),
	opportunities: numeric(),
	teamCareerTargets: numeric("team_career_targets"),
	teamCareerAirYards: numeric("team_career_air_yards"),
}).as(sql`SELECT player_id, max(player_name) AS player_name, season_type, (array_agg(team ORDER BY season DESC))[1] AS team, min(season) AS first_season, max(season) AS last_season, count(DISTINCT season) AS seasons_played, max("position") AS "position", sum(games_played) AS games_played, sum(plays) AS plays, sum(qb_plays) AS qb_plays, sum(completions) AS completions, sum(attempts) AS attempts, sum(passing_yards) AS passing_yards, sum(passing_tds) AS passing_tds, sum(interceptions) AS interceptions, sum(sacks) AS sacks, sum(sack_yards) AS sack_yards, sum(passing_air_yards) AS passing_air_yards, sum(passing_yards) - sum(passing_air_yards) AS passing_yards_after_catch, sum(passes) AS passes, sum(carries) AS carries, sum(rushing_yards) AS rushing_yards, sum(rushing_tds) AS rushing_tds, sum(rushing_fumbles) AS rushing_fumbles, sum(rushing_fumbles_lost) AS rushing_fumbles_lost, sum(rushing_first_downs) AS rushing_first_downs, sum(sack_fumbles) AS sack_fumbles, sum(sack_fumbles_lost) AS sack_fumbles_lost, sum(targets) AS targets, sum(receptions) AS receptions, sum(receiving_yards) AS receiving_yards, sum(receiving_tds) AS receiving_tds, sum(receiving_fumbles) AS receiving_fumbles, sum(receiving_fumbles_lost) AS receiving_fumbles_lost, sum(receiving_air_yards) AS receiving_air_yards, sum(receiving_yards_after_catch) AS receiving_yards_after_catch, sum(receiving_first_downs) AS receiving_first_downs, sum(dropbacks) AS dropbacks, sum(total_cpoe) AS total_cpoe, sum(cpoe_count) AS cpoe_count, sum(scrambles) AS scrambles, sum(scramble_yards) AS scramble_yards, sum(scramble_first_downs) AS scramble_first_downs, sum(passing_first_downs) AS passing_first_downs, sum(explosive_passes) AS explosive_passes, sum(explosive_runs) AS explosive_runs, sum(explosive_receptions) AS explosive_receptions, sum(explosive_scrambles) AS explosive_scrambles, sum(successful_passes) AS successful_passes, sum(successful_dropbacks) AS successful_dropbacks, sum(successful_scrambles) AS successful_scrambles, sum(successful_rushes) AS successful_rushes, sum(successful_receptions) AS successful_receptions, sum(qb_targets) AS qb_targets, sum(qb_air_yards) AS qb_air_yards, sum(total_epa) AS total_epa, sum(passing_epa) AS passing_epa, sum(rushing_epa) AS rushing_epa, sum(receiving_epa) AS receiving_epa, sum(dropback_epa) AS dropback_epa, sum(scramble_epa) AS scramble_epa, sum(touches) AS touches, sum(opportunities) AS opportunities, sum(team_season_targets) AS team_career_targets, sum(team_season_air_yards) AS team_career_air_yards FROM player_season_stats GROUP BY player_id, season_type`);

export const playerCareerStatsWithMetrics = pgView("player_career_stats_with_metrics", {	playerId: varchar("player_id", { length: 50 }),
	playerName: text("player_name"),
	seasonType: text("season_type"),
	team: varchar(),
	firstSeason: integer("first_season"),
	lastSeason: integer("last_season"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	seasonsPlayed: bigint("seasons_played", { mode: "number" }),
	position: text(),
	gamesPlayed: numeric("games_played"),
	plays: numeric(),
	qbPlays: numeric("qb_plays"),
	completions: numeric(),
	attempts: numeric(),
	passingYards: numeric("passing_yards"),
	passingTds: numeric("passing_tds"),
	interceptions: numeric(),
	sacks: numeric(),
	sackYards: numeric("sack_yards"),
	passingAirYards: numeric("passing_air_yards"),
	passingYardsAfterCatch: numeric("passing_yards_after_catch"),
	passes: numeric(),
	carries: numeric(),
	rushingYards: numeric("rushing_yards"),
	rushingTds: numeric("rushing_tds"),
	rushingFumbles: numeric("rushing_fumbles"),
	rushingFumblesLost: numeric("rushing_fumbles_lost"),
	rushingFirstDowns: numeric("rushing_first_downs"),
	sackFumbles: numeric("sack_fumbles"),
	sackFumblesLost: numeric("sack_fumbles_lost"),
	targets: numeric(),
	receptions: numeric(),
	receivingYards: numeric("receiving_yards"),
	receivingTds: numeric("receiving_tds"),
	receivingFumbles: numeric("receiving_fumbles"),
	receivingFumblesLost: numeric("receiving_fumbles_lost"),
	receivingAirYards: numeric("receiving_air_yards"),
	receivingYardsAfterCatch: numeric("receiving_yards_after_catch"),
	receivingFirstDowns: numeric("receiving_first_downs"),
	dropbacks: numeric(),
	totalCpoe: doublePrecision("total_cpoe"),
	cpoeCount: numeric("cpoe_count"),
	scrambles: numeric(),
	scrambleYards: doublePrecision("scramble_yards"),
	scrambleFirstDowns: numeric("scramble_first_downs"),
	passingFirstDowns: numeric("passing_first_downs"),
	explosivePasses: numeric("explosive_passes"),
	explosiveRuns: numeric("explosive_runs"),
	explosiveReceptions: numeric("explosive_receptions"),
	explosiveScrambles: numeric("explosive_scrambles"),
	successfulPasses: doublePrecision("successful_passes"),
	successfulDropbacks: doublePrecision("successful_dropbacks"),
	successfulScrambles: doublePrecision("successful_scrambles"),
	successfulRushes: doublePrecision("successful_rushes"),
	successfulReceptions: doublePrecision("successful_receptions"),
	qbTargets: numeric("qb_targets"),
	qbAirYards: numeric("qb_air_yards"),
	totalEpa: doublePrecision("total_epa"),
	passingEpa: doublePrecision("passing_epa"),
	rushingEpa: doublePrecision("rushing_epa"),
	receivingEpa: doublePrecision("receiving_epa"),
	dropbackEpa: doublePrecision("dropback_epa"),
	scrambleEpa: doublePrecision("scramble_epa"),
	touches: numeric(),
	opportunities: numeric(),
	teamCareerTargets: numeric("team_career_targets"),
	teamCareerAirYards: numeric("team_career_air_yards"),
	completionsPerGame: numeric("completions_per_game"),
	attemptsPerGame: numeric("attempts_per_game"),
	passingYardsPerGame: numeric("passing_yards_per_game"),
	carriesPerGame: numeric("carries_per_game"),
	rushingYardsPerGame: numeric("rushing_yards_per_game"),
	targetsPerGame: numeric("targets_per_game"),
	receptionsPerGame: numeric("receptions_per_game"),
	receivingYardsPerGame: numeric("receiving_yards_per_game"),
	completionPercentage: numeric("completion_percentage"),
	yardsPerAttempt: numeric("yards_per_attempt"),
	tdPercentage: numeric("td_percentage"),
	intPercentage: numeric("int_percentage"),
	sackRate: numeric("sack_rate"),
	scrambleRate: numeric("scramble_rate"),
	cpoe: numeric(),
	qbAdot: numeric("qb_adot"),
	receiverAdot: numeric("receiver_adot"),
	yardsPerCarry: numeric("yards_per_carry"),
	rushTdPercentage: numeric("rush_td_percentage"),
	catchRate: numeric("catch_rate"),
	yardsPerReception: numeric("yards_per_reception"),
	yardsPerTarget: numeric("yards_per_target"),
	receivingTdPercentage: numeric("receiving_td_percentage"),
	targetSuccessRate: numeric("target_success_rate"),
	pacr: numeric(),
	racr: numeric(),
	targetShare: numeric("target_share"),
	airYardsShare: numeric("air_yards_share"),
	wopr: numeric(),
	successRate: numeric("success_rate"),
	passingSuccessRate: numeric("passing_success_rate"),
	dropbackSuccessRate: numeric("dropback_success_rate"),
	scrambleSuccessRate: numeric("scramble_success_rate"),
	rushingSuccessRate: numeric("rushing_success_rate"),
	epaPerPass: numeric("epa_per_pass"),
	epaPerDropback: numeric("epa_per_dropback"),
	epaPerScramble: numeric("epa_per_scramble"),
	epaPerCarry: numeric("epa_per_carry"),
	epaPerTarget: numeric("epa_per_target"),
	epaPerReception: numeric("epa_per_reception"),
	epaPerPlay: numeric("epa_per_play"),
	epaPerQbPlay: numeric("epa_per_qb_play"),
	explosivePassRate: numeric("explosive_pass_rate"),
	explosiveRunRate: numeric("explosive_run_rate"),
	explosiveTargetRate: numeric("explosive_target_rate"),
	explosiveCatchRate: numeric("explosive_catch_rate"),
	explosiveScrambleRate: numeric("explosive_scramble_rate"),
	totalYards: numeric("total_yards"),
	totalTouchdowns: numeric("total_touchdowns"),
	yardsPerGame: numeric("yards_per_game"),
	passerRating: numeric("passer_rating"),
	passingFirstDownRate: numeric("passing_first_down_rate"),
	rushingFirstDownRate: numeric("rushing_first_down_rate"),
	receivingFirstDownRate: numeric("receiving_first_down_rate"),
	scrambleFirstDownRate: numeric("scramble_first_down_rate"),
	touchesPerGame: numeric("touches_per_game"),
	opportunitiesPerGame: numeric("opportunities_per_game"),
}).as(sql`SELECT player_id, player_name, season_type, team, first_season, last_season, seasons_played, "position", games_played, plays, qb_plays, completions, attempts, passing_yards, passing_tds, interceptions, sacks, sack_yards, passing_air_yards, passing_yards_after_catch, passes, carries, rushing_yards, rushing_tds, rushing_fumbles, rushing_fumbles_lost, rushing_first_downs, sack_fumbles, sack_fumbles_lost, targets, receptions, receiving_yards, receiving_tds, receiving_fumbles, receiving_fumbles_lost, receiving_air_yards, receiving_yards_after_catch, receiving_first_downs, dropbacks, total_cpoe, cpoe_count, scrambles, scramble_yards, scramble_first_downs, passing_first_downs, explosive_passes, explosive_runs, explosive_receptions, explosive_scrambles, successful_passes, successful_dropbacks, successful_scrambles, successful_rushes, successful_receptions, qb_targets, qb_air_yards, total_epa, passing_epa, rushing_epa, receiving_epa, dropback_epa, scramble_epa, touches, opportunities, team_career_targets, team_career_air_yards, round(completions / NULLIF(games_played, 0::numeric), 1) AS completions_per_game, round(attempts / NULLIF(games_played, 0::numeric), 1) AS attempts_per_game, round(passing_yards / NULLIF(games_played, 0::numeric), 1) AS passing_yards_per_game, round(carries / NULLIF(games_played, 0::numeric), 1) AS carries_per_game, round(rushing_yards / NULLIF(games_played, 0::numeric), 1) AS rushing_yards_per_game, round(targets / NULLIF(games_played, 0::numeric), 1) AS targets_per_game, round(receptions / NULLIF(games_played, 0::numeric), 1) AS receptions_per_game, round(receiving_yards / NULLIF(games_played, 0::numeric), 1) AS receiving_yards_per_game, CASE WHEN attempts > 0::numeric THEN round(completions / attempts * 100::numeric, 1) ELSE NULL::numeric END AS completion_percentage, CASE WHEN attempts > 0::numeric THEN round(passing_yards / attempts, 1) ELSE NULL::numeric END AS yards_per_attempt, CASE WHEN attempts > 0::numeric THEN round(passing_tds / attempts * 100::numeric, 1) ELSE NULL::numeric END AS td_percentage, CASE WHEN attempts > 0::numeric THEN round(interceptions / attempts * 100::numeric, 1) ELSE NULL::numeric END AS int_percentage, CASE WHEN (attempts + sacks) > 0::numeric THEN round(sacks / (attempts + sacks) * 100::numeric, 1) ELSE NULL::numeric END AS sack_rate, CASE WHEN dropbacks > 0::numeric THEN round(scrambles / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS scramble_rate, CASE WHEN cpoe_count > 0::numeric THEN round(total_cpoe::numeric / cpoe_count, 1) ELSE NULL::numeric END AS cpoe, CASE WHEN attempts > 0::numeric THEN round(passing_air_yards / attempts, 1) ELSE NULL::numeric END AS qb_adot, CASE WHEN targets > 0::numeric THEN round(receiving_air_yards / targets, 1) ELSE NULL::numeric END AS receiver_adot, CASE WHEN carries > 0::numeric THEN round(rushing_yards / carries, 1) ELSE NULL::numeric END AS yards_per_carry, CASE WHEN carries > 0::numeric THEN round(rushing_tds / carries * 100::numeric, 1) ELSE NULL::numeric END AS rush_td_percentage, CASE WHEN targets > 0::numeric THEN round(receptions / targets * 100::numeric, 1) ELSE NULL::numeric END AS catch_rate, CASE WHEN receptions > 0::numeric THEN round(receiving_yards / receptions, 1) ELSE NULL::numeric END AS yards_per_reception, CASE WHEN targets > 0::numeric THEN round(receiving_yards / targets, 1) ELSE NULL::numeric END AS yards_per_target, CASE WHEN targets > 0::numeric THEN round(receiving_tds / targets * 100::numeric, 1) ELSE NULL::numeric END AS receiving_td_percentage, CASE WHEN targets > 0::numeric THEN round(successful_receptions::numeric / targets * 100::numeric, 1) ELSE NULL::numeric END AS target_success_rate, CASE WHEN passing_air_yards > 0::numeric THEN round(passing_yards / passing_air_yards, 3) ELSE NULL::numeric END AS pacr, CASE WHEN receiving_air_yards > 0::numeric THEN round(receiving_yards / receiving_air_yards, 3) ELSE NULL::numeric END AS racr, CASE WHEN team_career_targets > 0::numeric THEN round(targets / team_career_targets, 3) ELSE NULL::numeric END AS target_share, CASE WHEN team_career_air_yards > 0::numeric THEN round(receiving_air_yards / team_career_air_yards, 3) ELSE NULL::numeric END AS air_yards_share, CASE WHEN team_career_targets > 0::numeric AND team_career_air_yards > 0::numeric THEN round(1.5 * (targets / team_career_targets) + 0.7 * (receiving_air_yards / team_career_air_yards), 3) ELSE NULL::numeric END AS wopr, CASE WHEN qb_plays > 0::numeric THEN round((successful_passes::numeric + successful_rushes::numeric) / qb_plays * 100::numeric, 1) ELSE NULL::numeric END AS success_rate, CASE WHEN passes > 0::numeric THEN round(successful_passes::numeric / passes * 100::numeric, 1) ELSE NULL::numeric END AS passing_success_rate, CASE WHEN dropbacks > 0::numeric THEN round(successful_dropbacks::numeric / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS dropback_success_rate, CASE WHEN scrambles > 0::numeric THEN round(successful_scrambles::numeric / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS scramble_success_rate, CASE WHEN carries > 0::numeric THEN round(successful_rushes::numeric / carries * 100::numeric, 1) ELSE NULL::numeric END AS rushing_success_rate, CASE WHEN passes > 0::numeric THEN round(passing_epa::numeric / passes, 2) ELSE NULL::numeric END AS epa_per_pass, CASE WHEN dropbacks > 0::numeric THEN round(dropback_epa::numeric / dropbacks, 2) ELSE NULL::numeric END AS epa_per_dropback, CASE WHEN scrambles > 0::numeric THEN round(scramble_epa::numeric / scrambles, 2) ELSE NULL::numeric END AS epa_per_scramble, CASE WHEN carries > 0::numeric THEN round(rushing_epa::numeric / carries, 2) ELSE NULL::numeric END AS epa_per_carry, CASE WHEN targets > 0::numeric THEN round(receiving_epa::numeric / targets, 2) ELSE NULL::numeric END AS epa_per_target, CASE WHEN receptions > 0::numeric THEN round(receiving_epa::numeric / receptions, 2) ELSE NULL::numeric END AS epa_per_reception, CASE WHEN plays > 0::numeric THEN round(total_epa::numeric / plays, 2) ELSE NULL::numeric END AS epa_per_play, CASE WHEN qb_plays > 0::numeric THEN round((passing_epa + rushing_epa)::numeric / qb_plays, 2) ELSE NULL::numeric END AS epa_per_qb_play, CASE WHEN passes > 0::numeric THEN round(explosive_passes / passes * 100::numeric, 1) ELSE NULL::numeric END AS explosive_pass_rate, CASE WHEN carries > 0::numeric THEN round(explosive_runs / carries * 100::numeric, 1) ELSE NULL::numeric END AS explosive_run_rate, CASE WHEN targets > 0::numeric THEN round(explosive_receptions / targets * 100::numeric, 1) ELSE NULL::numeric END AS explosive_target_rate, CASE WHEN receptions > 0::numeric THEN round(explosive_receptions / receptions * 100::numeric, 1) ELSE NULL::numeric END AS explosive_catch_rate, CASE WHEN scrambles > 0::numeric THEN round(explosive_scrambles / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS explosive_scramble_rate, passing_yards + rushing_yards + receiving_yards AS total_yards, passing_tds + rushing_tds + receiving_tds AS total_touchdowns, round((passing_yards + rushing_yards + receiving_yards) / games_played, 1) AS yards_per_game, CASE WHEN attempts >= 1::numeric THEN round(((completions / attempts * 100::numeric - 30::numeric) / 20::numeric + (passing_yards / attempts - 3::numeric) / 4::numeric + passing_tds / attempts * 20::numeric + 2.375 - interceptions / attempts * 25::numeric) / 6::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passer_rating, CASE WHEN attempts > 0::numeric THEN round(passing_first_downs / attempts * 100::numeric, 1) ELSE NULL::numeric END AS passing_first_down_rate, CASE WHEN carries > 0::numeric THEN round(rushing_first_downs / carries * 100::numeric, 1) ELSE NULL::numeric END AS rushing_first_down_rate, CASE WHEN targets > 0::numeric THEN round(receiving_first_downs / targets * 100::numeric, 1) ELSE NULL::numeric END AS receiving_first_down_rate, CASE WHEN scrambles > 0::numeric THEN round(scramble_first_downs / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS scramble_first_down_rate, round(touches / games_played, 1) AS touches_per_game, round(opportunities / games_played, 1) AS opportunities_per_game FROM player_career_stats pc`);