-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE "teams" (
	"team_abbr" varchar(10) PRIMARY KEY NOT NULL,
	"team_name" varchar(100) NOT NULL,
	"team_id" integer,
	"team_nick" varchar(50),
	"team_conf" varchar(5),
	"team_division" varchar(10),
	"team_color" varchar(7),
	"team_color2" varchar(7),
	"team_color3" varchar(7),
	"team_color4" varchar(7),
	"team_logo_wikipedia" varchar(255),
	"team_logo_espn" varchar(255),
	"team_wordmark" varchar(255),
	"team_conference_logo" varchar(255),
	"team_league_logo" varchar(255),
	"team_logo_squared" varchar(255),
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "players" (
	"gsis_id" varchar(50) PRIMARY KEY NOT NULL,
	"status" varchar(20),
	"display_name" varchar(100) NOT NULL,
	"first_name" varchar(50),
	"last_name" varchar(50),
	"esb_id" varchar(50),
	"birth_date" date,
	"college_name" varchar(100),
	"position" varchar(5),
	"jersey_number" integer,
	"height" integer,
	"weight" integer,
	"team_abbr" varchar(10),
	"current_team_id" varchar(50),
	"entry_year" integer,
	"rookie_year" integer,
	"draft_club" varchar(10),
	"college_conference" varchar(50),
	"status_short_description" varchar(20),
	"gsis_it_id" integer,
	"short_name" varchar(50),
	"headshot" varchar(255),
	"draft_number" integer,
	"draftround" integer,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "games" (
	"game_id" varchar(50) PRIMARY KEY NOT NULL,
	"season" integer NOT NULL,
	"game_type" varchar(10) NOT NULL,
	"week" integer NOT NULL,
	"gameday" date NOT NULL,
	"weekday" varchar(10),
	"gametime" time,
	"away_team" varchar(10) NOT NULL,
	"away_score" integer,
	"home_team" varchar(10) NOT NULL,
	"home_score" integer,
	"location" varchar(100),
	"result" integer,
	"total" integer,
	"overtime" integer,
	"gsis" integer,
	"nfl_detail_id" varchar(50),
	"pfr" varchar(50),
	"pff" integer,
	"espn" integer,
	"ftn" integer,
	"away_rest" integer,
	"home_rest" integer,
	"away_moneyline" double precision,
	"home_moneyline" double precision,
	"spread_line" double precision,
	"away_spread_odds" double precision,
	"home_spread_odds" double precision,
	"total_line" double precision,
	"under_odds" double precision,
	"over_odds" double precision,
	"div_game" integer,
	"roof" varchar(20),
	"surface" varchar(50),
	"temp" integer,
	"wind" integer,
	"away_qb_id" varchar(50),
	"home_qb_id" varchar(50),
	"away_qb_name" varchar(100),
	"home_qb_name" varchar(100),
	"away_coach" varchar(100),
	"home_coach" varchar(100),
	"stadium_id" varchar(50),
	"stadium" varchar(100),
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "snap_counts" (
	"gsis_id" varchar(50) NOT NULL,
	"game_id" varchar(50) NOT NULL,
	"season" integer NOT NULL,
	"week" integer NOT NULL,
	"offense_snaps" integer,
	"offense_pct" double precision,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL,
	CONSTRAINT "snap_counts_pkey" PRIMARY KEY("gsis_id","game_id")
);
--> statement-breakpoint
ALTER TABLE "players" ADD CONSTRAINT "players_team_abbr_fkey" FOREIGN KEY ("team_abbr") REFERENCES "public"."teams"("team_abbr") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "games" ADD CONSTRAINT "games_away_qb_id_fkey" FOREIGN KEY ("away_qb_id") REFERENCES "public"."players"("gsis_id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "games" ADD CONSTRAINT "games_away_team_fkey" FOREIGN KEY ("away_team") REFERENCES "public"."teams"("team_abbr") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "games" ADD CONSTRAINT "games_home_qb_id_fkey" FOREIGN KEY ("home_qb_id") REFERENCES "public"."players"("gsis_id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "games" ADD CONSTRAINT "games_home_team_fkey" FOREIGN KEY ("home_team") REFERENCES "public"."teams"("team_abbr") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "snap_counts" ADD CONSTRAINT "snap_counts_game_id_fkey" FOREIGN KEY ("game_id") REFERENCES "public"."games"("game_id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "snap_counts" ADD CONSTRAINT "snap_counts_gsis_id_fkey" FOREIGN KEY ("gsis_id") REFERENCES "public"."players"("gsis_id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "idx_teams_conference_division" ON "teams" USING btree ("team_conf" text_ops,"team_division" text_ops);--> statement-breakpoint
CREATE INDEX "idx_teams_name_trgm" ON "teams" USING gin ("team_name" gin_trgm_ops);--> statement-breakpoint
CREATE INDEX "idx_players_active" ON "players" USING btree ("status" text_ops) WHERE ((status)::text = 'Active'::text);--> statement-breakpoint
CREATE INDEX "idx_players_display_name_trgm" ON "players" USING gin ("display_name" gin_trgm_ops);--> statement-breakpoint
CREATE INDEX "idx_players_name_collation" ON "players" USING btree ("display_name" text_ops);--> statement-breakpoint
CREATE INDEX "idx_players_name_search" ON "players" USING btree (lower((display_name)::text) varchar_pattern_ops);--> statement-breakpoint
CREATE INDEX "idx_players_position" ON "players" USING btree ("position" text_ops);--> statement-breakpoint
CREATE INDEX "idx_players_team" ON "players" USING btree ("team_abbr" text_ops);--> statement-breakpoint
CREATE INDEX "idx_games_date" ON "games" USING btree ("gameday" date_ops);--> statement-breakpoint
CREATE INDEX "idx_games_game_type" ON "games" USING btree ("game_type" text_ops);--> statement-breakpoint
CREATE INDEX "idx_games_season_week" ON "games" USING btree ("season" int4_ops,"week" int4_ops,"game_type" text_ops);--> statement-breakpoint
CREATE INDEX "idx_games_teams" ON "games" USING btree ("home_team" text_ops,"away_team" text_ops);--> statement-breakpoint
CREATE INDEX "idx_snap_counts_gsis_id" ON "snap_counts" USING btree ("gsis_id" text_ops);--> statement-breakpoint
CREATE INDEX "idx_snap_counts_gsis_id_season" ON "snap_counts" USING btree ("gsis_id" int4_ops,"season" text_ops);--> statement-breakpoint
CREATE VIEW "public"."player_career_team" AS (WITH player_team_games AS ( SELECT player_game_stats.player_id, player_game_stats.team, row_number() OVER (PARTITION BY player_game_stats.player_id ORDER BY (count(*)) DESC, (max(player_game_stats.season)) DESC, (max( CASE WHEN player_game_stats.season = (( SELECT max(games.season) AS max FROM games)) THEN player_game_stats.week ELSE 0 END)) DESC) AS team_rank FROM player_game_stats GROUP BY player_game_stats.player_id, player_game_stats.team ), ranked_teams AS ( SELECT player_team_games.player_id, player_team_games.team FROM player_team_games WHERE player_team_games.team_rank = 1 ) SELECT c.player_id AS gsis_id, CASE WHEN c.last_season < (( SELECT max(games.season) AS max FROM games)) THEN h.team ELSE p.team_abbr END AS team FROM player_career_stats c JOIN ranked_teams h ON c.player_id::text = h.player_id::text JOIN players p ON c.player_id::text = p.gsis_id::text WHERE c.season_type = 'REG'::text);--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."player_game_stats" AS (WITH playstats_agg AS ( SELECT ps_1.player_id, ps_1.game_id, ps_1.season, ps_1.week, ps_1.team, max(pl."position"::text) AS "position", count(DISTINCT ps_1.play_id) AS total_plays, sum( CASE WHEN ps_1.is_comp THEN 1 ELSE 0 END) AS completions, sum( CASE WHEN ps_1.is_att THEN 1 ELSE 0 END) AS attempts, sum( CASE WHEN ps_1.is_pass_td THEN 1 ELSE 0 END) AS passing_tds, sum( CASE WHEN ps_1.is_int THEN 1 ELSE 0 END) AS interceptions, sum( CASE WHEN ps_1.is_sack THEN 1 ELSE 0 END) AS sacks, sum( CASE WHEN ps_1.is_sack_fumble THEN 1 ELSE 0 END) AS sack_fumbles, sum( CASE WHEN ps_1.is_sack_fumble_lost THEN 1 ELSE 0 END) AS sack_fumbles_lost, sum( CASE WHEN ps_1.is_pass_first_down THEN 1 ELSE 0 END) AS passing_first_downs, sum( CASE WHEN ps_1.is_pass_2pt THEN 1 ELSE 0 END) AS passing_2pt_conversions, sum( CASE WHEN ps_1.qb_target THEN 1 ELSE 0 END) AS qb_targets, sum( CASE WHEN ps_1.is_carry THEN 1 ELSE 0 END) AS carries, sum( CASE WHEN ps_1.is_rush_td THEN 1 ELSE 0 END) AS rushing_tds, sum( CASE WHEN ps_1.is_rush_fumble THEN 1 ELSE 0 END) AS rushing_fumbles, sum( CASE WHEN ps_1.is_rush_fumble_lost THEN 1 ELSE 0 END) AS rushing_fumbles_lost, sum( CASE WHEN ps_1.is_rush_first_down THEN 1 ELSE 0 END) AS rushing_first_downs, sum( CASE WHEN ps_1.is_rush_2pt THEN 1 ELSE 0 END) AS rushing_2pt_conversions, sum( CASE WHEN ps_1.is_target THEN 1 ELSE 0 END) AS targets, sum( CASE WHEN ps_1.is_rec THEN 1 ELSE 0 END) AS receptions, sum( CASE WHEN ps_1.is_rec_td THEN 1 ELSE 0 END) AS receiving_tds, sum( CASE WHEN ps_1.is_rec_fumble THEN 1 ELSE 0 END) AS receiving_fumbles, sum( CASE WHEN ps_1.is_rec_fumble_lost THEN 1 ELSE 0 END) AS receiving_fumbles_lost, sum( CASE WHEN ps_1.is_rec_first_down THEN 1 ELSE 0 END) AS receiving_first_downs, sum( CASE WHEN ps_1.is_rec_2pt THEN 1 ELSE 0 END) AS receiving_2pt_conversions, sum( CASE WHEN ps_1.is_special_td THEN 1 ELSE 0 END) AS special_teams_tds, sum(ps_1.pass_yards) AS passing_yards, sum(ps_1.sack_yards) AS sack_yards, sum(ps_1.air_yards) AS passing_air_yards, sum(ps_1.air_yards_complete) AS qb_air_yards, sum(ps_1.rush_yards) AS rushing_yards, sum(ps_1.rec_yards) AS receiving_yards, sum(ps_1.yac) AS receiving_yards_after_catch, sum( CASE WHEN ps_1.pass_yards >= 20 THEN 1 ELSE 0 END) AS explosive_passes, sum( CASE WHEN ps_1.rush_yards > 10 THEN 1 ELSE 0 END) AS explosive_runs, sum( CASE WHEN ps_1.rec_yards >= 20 THEN 1 ELSE 0 END) AS explosive_receptions, sum( CASE WHEN ps_1.rush_yards >= 20 THEN 1 ELSE 0 END) AS explosive_scrambles, sum( CASE WHEN ps_1.is_target THEN ps_1.team_play_air_yards ELSE 0 END) AS receiving_air_yards, max(ps_1.team_game_targets) AS team_game_targets, max(ps_1.team_game_air_yards) AS team_game_air_yards, max(ps_1.player_name::text) AS player_name, max(ps_1.season_type::text) AS season_type, max(NULLIF( CASE WHEN ps_1.team::text = ps_1.off::text THEN ps_1.def ELSE ps_1.off END::text, 'NaN'::text)) AS opponent_team FROM playstats ps_1 JOIN ( SELECT players.gsis_id, players."position" FROM players WHERE players."position"::text = ANY (ARRAY['QB'::character varying, 'RB'::character varying, 'WR'::character varying, 'TE'::character varying]::text[])) pl ON ps_1.player_id::text = pl.gsis_id::text WHERE ps_1.player_id::text <> 'TEAM'::text GROUP BY ps_1.player_id, ps_1.game_id, ps_1.season, ps_1.week, ps_1.team ), passing_stats AS ( SELECT p.season, p.week, p.game_id, p.passer_player_id AS player_id, sum(p.qb_epa) AS passing_epa, avg(NULLIF(p.cpoe, 'NaN'::double precision)) AS passing_cpoe, count(NULLIF(p.cpoe, 'NaN'::double precision)) AS cpoe_count, sum(NULLIF(p.cpoe, 'NaN'::double precision)) AS total_cpoe, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_passes, count(p.passer_player_id) AS passes FROM plays p WHERE (p.play_type::text = ANY (ARRAY['pass'::character varying, 'qb_spike'::character varying]::text[])) AND p.passer_player_id IS NOT NULL GROUP BY p.season, p.week, p.game_id, p.passer_player_id ), rushing_stats AS ( SELECT p.season, p.week, p.game_id, p.rusher_player_id AS player_id, sum(p.epa) AS rushing_epa, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_rushes FROM plays p WHERE (p.play_type::text = ANY (ARRAY['run'::character varying, 'qb_kneel'::character varying]::text[])) AND p.rusher_player_id IS NOT NULL GROUP BY p.season, p.week, p.game_id, p.rusher_player_id ), receiving_stats AS ( SELECT p.season, p.week, p.game_id, p.receiver_player_id AS player_id, sum(p.epa) AS receiving_epa, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_receptions FROM plays p WHERE p.receiver_player_id IS NOT NULL GROUP BY p.season, p.week, p.game_id, p.receiver_player_id ), dropback_stats AS ( SELECT p.season, p.week, p.game_id, CASE WHEN p.qb_scramble = 1 THEN p.rusher_player_id ELSE p.passer_player_id END AS player_id, count(*) AS dropbacks, sum(p.qb_epa) AS dropback_epa, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_dropbacks FROM plays p WHERE p.qb_dropback = 1 AND (p.qb_scramble = 1 AND p.rusher_player_id IS NOT NULL OR p.passer_player_id IS NOT NULL) GROUP BY p.season, p.week, p.game_id, ( CASE WHEN p.qb_scramble = 1 THEN p.rusher_player_id ELSE p.passer_player_id END) ), scramble_stats AS ( SELECT p.season, p.week, p.game_id, p.rusher_player_id AS player_id, count(*) AS scrambles, sum(p.qb_epa) AS scramble_epa, sum(p.rushing_yards) AS scramble_yards, sum(NULLIF(p.success::double precision, 'NaN'::double precision)) AS successful_scrambles, sum( CASE WHEN p.first_down_rush = 1 THEN 1 ELSE 0 END) AS scramble_first_downs FROM plays p WHERE p.qb_scramble = 1 AND p.rusher_player_id IS NOT NULL GROUP BY p.season, p.week, p.game_id, p.rusher_player_id ) SELECT pa.game_id, pa.season, pa.week, pa.player_id, pa.player_name, pa.team, CASE WHEN pa.team::text = g.home_team::text THEN 'home'::text ELSE 'away'::text END AS home_away, pa.season_type, pa.opponent_team, pa."position", pa.total_plays, COALESCE(sc.offense_snaps, 0) AS plays, COALESCE(ps.passes, 0::bigint) + pa.carries AS qb_plays, pa.completions, pa.attempts, pa.passing_tds, pa.interceptions, pa.sacks, pa.passing_yards, pa.sack_yards, pa.passing_air_yards, pa.passing_first_downs, COALESCE(ps.passing_cpoe, 0::double precision) AS cpoe, COALESCE(ps.passes, 0::bigint) AS passes, pa.qb_targets, pa.qb_air_yards, COALESCE(ps.passing_epa, 0::double precision) AS passing_epa, COALESCE(ps.successful_passes, 0::double precision) AS successful_passes, COALESCE(ps.total_cpoe, 0::double precision) AS total_cpoe, COALESCE(ps.cpoe_count, 0::bigint) AS cpoe_count, COALESCE(ds.dropbacks, 0::bigint) AS dropbacks, COALESCE(ds.dropback_epa, 0::double precision) AS dropback_epa, COALESCE(ds.successful_dropbacks, 0::double precision) AS successful_dropbacks, COALESCE(ss.scrambles, 0::bigint) AS scrambles, COALESCE(ss.scramble_epa, 0::double precision) AS scramble_epa, COALESCE(ss.scramble_yards, 0::double precision) AS scramble_yards, COALESCE(ss.successful_scrambles, 0::double precision) AS successful_scrambles, COALESCE(ss.scramble_first_downs, 0::bigint) AS scramble_first_downs, pa.carries, pa.rushing_tds, pa.rushing_yards, pa.rushing_first_downs, COALESCE(rs.rushing_epa, 0::double precision) AS rushing_epa, COALESCE(rs.successful_rushes, 0::double precision) AS successful_rushes, pa.targets, pa.receptions, pa.receiving_tds, pa.receiving_yards, pa.receiving_yards_after_catch, pa.receiving_first_downs, pa.receiving_air_yards, COALESCE(recs.receiving_epa, 0::double precision) AS receiving_epa, COALESCE(recs.successful_receptions, 0::double precision) AS successful_receptions, pa.explosive_passes, pa.explosive_runs, pa.explosive_receptions, pa.explosive_scrambles, pa.sack_fumbles, pa.sack_fumbles_lost, pa.rushing_fumbles, pa.rushing_fumbles_lost, pa.receiving_fumbles, pa.receiving_fumbles_lost, pa.passing_2pt_conversions, pa.rushing_2pt_conversions, pa.receiving_2pt_conversions, pa.special_teams_tds, pa.team_game_targets, pa.team_game_air_yards, pa.carries + pa.receptions AS touches, pa.carries + pa.targets AS opportunities, COALESCE(ps.passing_epa, 0::double precision) + COALESCE(rs.rushing_epa, 0::double precision) + COALESCE(recs.receiving_epa, 0::double precision) AS total_epa FROM playstats_agg pa LEFT JOIN snap_counts sc ON pa.player_id::text = sc.gsis_id::text AND pa.game_id::text = sc.game_id::text LEFT JOIN passing_stats ps ON pa.player_id::text = ps.player_id::text AND pa.game_id::text = ps.game_id::text LEFT JOIN rushing_stats rs ON pa.player_id::text = rs.player_id::text AND pa.game_id::text = rs.game_id::text LEFT JOIN receiving_stats recs ON pa.player_id::text = recs.player_id::text AND pa.game_id::text = recs.game_id::text LEFT JOIN dropback_stats ds ON pa.player_id::text = ds.player_id::text AND pa.game_id::text = ds.game_id::text LEFT JOIN scramble_stats ss ON pa.player_id::text = ss.player_id::text AND pa.game_id::text = ss.game_id::text LEFT JOIN ( SELECT games.game_id, games.home_team, games.away_team FROM games) g ON pa.game_id::text = g.game_id::text);--> statement-breakpoint
CREATE VIEW "public"."player_game_stats_with_metrics" AS (SELECT game_id, season, week, player_id, player_name, team, home_away, season_type, opponent_team, "position", total_plays, plays, qb_plays, completions, attempts, passing_tds, interceptions, sacks, passing_yards, sack_yards, passing_air_yards, passing_first_downs, cpoe, passes, qb_targets, qb_air_yards, passing_epa, successful_passes, total_cpoe, cpoe_count, dropbacks, dropback_epa, successful_dropbacks, scrambles, scramble_epa, scramble_yards, successful_scrambles, scramble_first_downs, carries, rushing_tds, rushing_yards, rushing_first_downs, rushing_epa, successful_rushes, targets, receptions, receiving_tds, receiving_yards, receiving_yards_after_catch, receiving_first_downs, receiving_air_yards, receiving_epa, successful_receptions, explosive_passes, explosive_runs, explosive_receptions, explosive_scrambles, sack_fumbles, sack_fumbles_lost, rushing_fumbles, rushing_fumbles_lost, receiving_fumbles, receiving_fumbles_lost, passing_2pt_conversions, rushing_2pt_conversions, receiving_2pt_conversions, special_teams_tds, team_game_targets, team_game_air_yards, touches, opportunities, total_epa, CASE WHEN attempts > 0 THEN round(completions::numeric / attempts::numeric * 100::numeric, 1) ELSE NULL::numeric END AS completion_percentage, CASE WHEN attempts > 0 THEN round(passing_yards::numeric / attempts::numeric, 1) ELSE NULL::numeric END AS yards_per_attempt, CASE WHEN dropbacks > 0 THEN round(sacks::numeric / dropbacks::numeric * 100::numeric, 1) ELSE NULL::numeric END AS sack_rate, CASE WHEN dropbacks > 0 THEN round(scrambles::numeric / dropbacks::numeric * 100::numeric, 1) ELSE NULL::numeric END AS scramble_rate, CASE WHEN qb_targets > 0 THEN round(qb_air_yards::numeric / qb_targets::numeric, 1) ELSE NULL::numeric END AS qb_adot, CASE WHEN targets > 0 THEN round(receiving_air_yards::numeric / targets::numeric, 1) ELSE NULL::numeric END AS receiver_adot, CASE WHEN carries > 0 THEN round(rushing_yards::numeric / carries::numeric, 1) ELSE NULL::numeric END AS yards_per_carry, CASE WHEN targets > 0 THEN round(receptions::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS catch_rate, CASE WHEN receptions > 0 THEN round(receiving_yards::numeric / receptions::numeric, 1) ELSE NULL::numeric END AS yards_per_reception, CASE WHEN passing_air_yards > 0 THEN round(passing_yards::numeric / passing_air_yards::numeric, 3) ELSE NULL::numeric END AS pacr, CASE WHEN receiving_air_yards > 0 THEN round(receiving_yards::numeric / receiving_air_yards::numeric, 3) ELSE NULL::numeric END AS racr, CASE WHEN team_game_targets > 0 THEN round(targets::numeric / team_game_targets::numeric, 3) ELSE NULL::numeric END AS target_share, CASE WHEN team_game_air_yards > 0 THEN round(receiving_air_yards::numeric / team_game_air_yards::numeric, 3) ELSE NULL::numeric END AS air_yards_share, CASE WHEN team_game_targets > 0 AND team_game_air_yards > 0 THEN round(1.5 * (targets::numeric / team_game_targets::numeric) + 0.7 * (receiving_air_yards::numeric / team_game_air_yards::numeric), 3) ELSE NULL::numeric END AS wopr, CASE WHEN qb_plays > 0 THEN round((successful_passes::numeric + successful_rushes::numeric) / qb_plays::numeric * 100::numeric, 1) ELSE NULL::numeric END AS success_rate, CASE WHEN passes > 0 THEN round(successful_passes::numeric / passes::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passing_success_rate, CASE WHEN dropbacks > 0 THEN round(successful_dropbacks::numeric / dropbacks::numeric * 100::numeric, 1) ELSE NULL::numeric END AS dropback_success_rate, CASE WHEN scrambles > 0 THEN round(successful_scrambles::numeric / scrambles::numeric * 100::numeric, 1) ELSE NULL::numeric END AS scramble_success_rate, CASE WHEN carries > 0 THEN round(successful_rushes::numeric / carries::numeric * 100::numeric, 1) ELSE NULL::numeric END AS rushing_success_rate, CASE WHEN targets > 0 THEN round(successful_receptions::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS target_success_rate, CASE WHEN dropbacks > 0 THEN round(dropback_epa::numeric / dropbacks::numeric, 2) ELSE NULL::numeric END AS epa_per_dropback, CASE WHEN scrambles > 0 THEN round(scramble_epa::numeric / scrambles::numeric, 2) ELSE NULL::numeric END AS epa_per_scramble, CASE WHEN plays > 0 THEN round((passing_epa + rushing_epa + receiving_epa)::numeric / plays::numeric, 2) ELSE NULL::numeric END AS epa_per_play, CASE WHEN qb_plays > 0 THEN round((passing_epa + rushing_epa)::numeric / qb_plays::numeric, 2) ELSE NULL::numeric END AS epa_per_qb_play, CASE WHEN passes > 0 THEN round(passing_epa::numeric / passes::numeric, 2) ELSE NULL::numeric END AS epa_per_pass, CASE WHEN carries > 0 THEN round(rushing_epa::numeric / carries::numeric, 2) ELSE NULL::numeric END AS epa_per_carry, CASE WHEN targets > 0 THEN round(receiving_epa::numeric / targets::numeric, 2) ELSE NULL::numeric END AS epa_per_target, CASE WHEN passes > 0 THEN round(explosive_passes::numeric / passes::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_pass_rate, CASE WHEN carries > 0 THEN round(explosive_runs::numeric / carries::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_run_rate, CASE WHEN targets > 0 THEN round(explosive_receptions::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_target_rate, CASE WHEN receptions > 0 THEN round(explosive_receptions::numeric / receptions::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_catch_rate, CASE WHEN scrambles > 0 THEN round(explosive_scrambles::numeric / scrambles::numeric * 100::numeric, 1) ELSE NULL::numeric END AS explosive_scramble_rate, passing_yards + rushing_yards + receiving_yards AS total_yards, passing_tds + rushing_tds + receiving_tds AS total_touchdowns, CASE WHEN carries > 0 THEN round(rushing_tds::numeric / carries::numeric * 100::numeric, 1) ELSE NULL::numeric END AS rush_td_percentage, CASE WHEN targets > 0 THEN round(receiving_tds::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS receiving_td_percentage, CASE WHEN receptions > 0 THEN round(receiving_epa::numeric / receptions::numeric, 2) ELSE NULL::numeric END AS epa_per_reception, CASE WHEN attempts > 0 THEN round(((completions::numeric / attempts::numeric * 100::numeric - 30::numeric) / 20::numeric + (passing_yards::numeric / attempts::numeric - 3::numeric) / 4::numeric + passing_tds::numeric / attempts::numeric * 20::numeric + 2.375 - interceptions::numeric / attempts::numeric * 25::numeric) / 6::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passer_rating, CASE WHEN attempts > 0 THEN round(passing_first_downs::numeric / attempts::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passing_first_down_rate, CASE WHEN carries > 0 THEN round(rushing_first_downs::numeric / carries::numeric * 100::numeric, 1) ELSE NULL::numeric END AS rushing_first_down_rate, CASE WHEN targets > 0 THEN round(receiving_first_downs::numeric / targets::numeric * 100::numeric, 1) ELSE NULL::numeric END AS receiving_first_down_rate, CASE WHEN scrambles > 0 THEN round(scramble_first_downs::numeric / scrambles::numeric * 100::numeric, 1) ELSE NULL::numeric END AS scramble_first_down_rate, CASE WHEN targets > 0 THEN round(passing_yards::numeric / targets::numeric, 1) ELSE NULL::numeric END AS yards_per_target FROM player_game_stats pgs);--> statement-breakpoint
CREATE MATERIALIZED VIEW "public"."player_relevance" AS (WITH recent_szn AS ( SELECT max(games.season) AS szn FROM games WHERE games.game_type::text = 'SB'::text ), career_stats AS ( SELECT player_season_stats_with_metrics.player_id, player_season_stats_with_metrics."position", log(GREATEST(sum(player_season_stats_with_metrics.total_yards), 0::numeric) + 1.0) * 0.125 * CASE WHEN player_season_stats_with_metrics."position" = 'QB'::text THEN 0.9 ELSE 1::numeric END AS career_l1, log(sum(player_season_stats_with_metrics.total_touchdowns) + 1.0) * 2.5 * CASE WHEN player_season_stats_with_metrics."position" = 'QB'::text THEN 0.85 ELSE 1::numeric END AS career_l2, log(GREATEST(sum(player_season_stats_with_metrics.total_epa), 0::double precision) + 1.0::double precision) * 2.0::double precision AS career_l3, log(sum(player_season_stats_with_metrics.touches) + 1.0) * 1.5 AS career_l4 FROM player_season_stats_with_metrics WHERE player_season_stats_with_metrics.season < (( SELECT recent_szn.szn FROM recent_szn)) GROUP BY player_season_stats_with_metrics.player_id, player_season_stats_with_metrics."position" ), recent_stats AS ( SELECT player_season_stats_with_metrics.player_id, player_season_stats_with_metrics."position", log(GREATEST(sum(player_season_stats_with_metrics.total_yards), 0::numeric) + 1.0) * 0.75 * CASE WHEN player_season_stats_with_metrics."position" = 'QB'::text THEN 0.9 ELSE 1::numeric END AS recent_l1, log(sum(player_season_stats_with_metrics.total_touchdowns) + 1.0) * 1.25 * CASE WHEN player_season_stats_with_metrics."position" = 'QB'::text THEN 0.85 ELSE 1::numeric END AS recent_l2, log(GREATEST(sum(player_season_stats_with_metrics.total_epa), 0::double precision) + 1.0::double precision) * 1.0::double precision AS recent_l3, log(sum(player_season_stats_with_metrics.touches) + 1.0) * 0.67 AS recent_l4 FROM player_season_stats_with_metrics WHERE player_season_stats_with_metrics.season = (( SELECT recent_szn.szn FROM recent_szn)) GROUP BY player_season_stats_with_metrics.player_id, player_season_stats_with_metrics."position" ), composite_score AS ( SELECT p.gsis_id AS player_id, p.display_name, p.last_name, COALESCE(r."position", c."position") AS "position", CASE WHEN p.rookie_year > (( SELECT recent_szn.szn FROM recent_szn)) AND p.draftround = 1 THEN 15::double precision WHEN p.rookie_year > (( SELECT recent_szn.szn FROM recent_szn)) AND p.draftround = 2 THEN 10::double precision WHEN p.rookie_year > (( SELECT recent_szn.szn FROM recent_szn)) THEN 5::double precision ELSE (1.5::double precision * COALESCE((r.recent_l1 + r.recent_l2)::double precision + r.recent_l3 + r.recent_l4::double precision, 0::double precision) + 1.0::double precision * COALESCE((c.career_l1 + c.career_l2)::double precision + c.career_l3 + c.career_l4::double precision, 0::double precision)) * CASE WHEN p.rookie_year = (( SELECT recent_szn.szn FROM recent_szn)) THEN 2 ELSE 1 END::double precision END AS composite_score FROM players p LEFT JOIN recent_stats r ON p.gsis_id::text = r.player_id::text LEFT JOIN career_stats c ON p.gsis_id::text = c.player_id::text ), normalized_composite_score AS ( SELECT rs.player_id, rs.display_name, rs.last_name, rs."position", rs.composite_score, CASE WHEN (max(rs.composite_score) OVER () - min(rs.composite_score) OVER ()) > 0::double precision THEN (rs.composite_score - min(rs.composite_score) OVER ()) / (max(rs.composite_score) OVER () - min(rs.composite_score) OVER ()) ELSE 0.5::double precision END AS normalized_composite_score FROM composite_score rs ) SELECT player_id, display_name, last_name, "position", composite_score, normalized_composite_score FROM normalized_composite_score);--> statement-breakpoint
CREATE VIEW "public"."player_season_stats" AS (SELECT player_id, max(player_name) AS player_name, season, season_type, (array_agg(team ORDER BY week DESC))[1] AS team, max("position") AS "position", count(DISTINCT game_id) AS games_played, sum(plays) AS plays, sum(qb_plays) AS qb_plays, sum(completions) AS completions, sum(attempts) AS attempts, sum(passing_yards) AS passing_yards, sum(passing_tds) AS passing_tds, sum(interceptions) AS interceptions, sum(sacks) AS sacks, sum(sack_yards) AS sack_yards, sum(passing_air_yards) AS passing_air_yards, sum(passing_yards) - sum(qb_air_yards) AS passing_yards_after_catch, sum(passes) AS passes, sum(sack_fumbles) AS sack_fumbles, sum(sack_fumbles_lost) AS sack_fumbles_lost, sum(carries) AS carries, sum(rushing_yards) AS rushing_yards, sum(rushing_tds) AS rushing_tds, sum(rushing_fumbles) AS rushing_fumbles, sum(rushing_fumbles_lost) AS rushing_fumbles_lost, sum(rushing_first_downs) AS rushing_first_downs, sum(targets) AS targets, sum(receptions) AS receptions, sum(receiving_yards) AS receiving_yards, sum(receiving_tds) AS receiving_tds, sum(receiving_fumbles) AS receiving_fumbles, sum(receiving_fumbles_lost) AS receiving_fumbles_lost, sum(receiving_air_yards) AS receiving_air_yards, sum(receiving_yards_after_catch) AS receiving_yards_after_catch, sum(receiving_first_downs) AS receiving_first_downs, sum(scrambles) AS scrambles, sum(scramble_yards) AS scramble_yards, sum(scramble_first_downs) AS scramble_first_downs, sum(qb_targets) AS qb_targets, sum(qb_air_yards) AS qb_air_yards, sum(dropbacks) AS dropbacks, sum(total_cpoe) AS total_cpoe, sum(cpoe_count) AS cpoe_count, sum(explosive_passes) AS explosive_passes, sum(explosive_runs) AS explosive_runs, sum(explosive_receptions) AS explosive_receptions, sum(explosive_scrambles) AS explosive_scrambles, sum(touches) AS touches, sum(opportunities) AS opportunities, sum(passing_first_downs) AS passing_first_downs, sum(successful_passes) AS successful_passes, sum(successful_rushes) AS successful_rushes, sum(successful_receptions) AS successful_receptions, sum(successful_dropbacks) AS successful_dropbacks, sum(successful_scrambles) AS successful_scrambles, sum(total_epa) AS total_epa, sum(passing_epa) AS passing_epa, sum(rushing_epa) AS rushing_epa, sum(receiving_epa) AS receiving_epa, sum(dropback_epa) AS dropback_epa, sum(scramble_epa) AS scramble_epa, sum(team_game_targets) AS team_season_targets, sum(team_game_air_yards) AS team_season_air_yards FROM player_game_stats GROUP BY player_id, season, season_type);--> statement-breakpoint
CREATE VIEW "public"."player_season_stats_with_metrics" AS (SELECT player_id, player_name, season, season_type, team, "position", games_played, plays, qb_plays, completions, attempts, passing_yards, passing_tds, interceptions, sacks, sack_yards, passing_air_yards, passing_yards_after_catch, passes, sack_fumbles, sack_fumbles_lost, carries, rushing_yards, rushing_tds, rushing_fumbles, rushing_fumbles_lost, rushing_first_downs, targets, receptions, receiving_yards, receiving_tds, receiving_fumbles, receiving_fumbles_lost, receiving_air_yards, receiving_yards_after_catch, receiving_first_downs, scrambles, scramble_yards, scramble_first_downs, qb_targets, qb_air_yards, dropbacks, total_cpoe, cpoe_count, explosive_passes, explosive_runs, explosive_receptions, explosive_scrambles, touches, opportunities, passing_first_downs, successful_passes, successful_rushes, successful_receptions, successful_dropbacks, successful_scrambles, total_epa, passing_epa, rushing_epa, receiving_epa, dropback_epa, scramble_epa, team_season_targets, team_season_air_yards, round(completions / games_played::numeric, 1) AS completions_per_game, round(attempts / games_played::numeric, 1) AS attempts_per_game, round(passing_yards / games_played::numeric, 1) AS passing_yards_per_game, round(carries / games_played::numeric, 1) AS carries_per_game, round(rushing_yards / games_played::numeric, 1) AS rushing_yards_per_game, round(targets / games_played::numeric, 1) AS targets_per_game, round(receptions / games_played::numeric, 1) AS receptions_per_game, round(receiving_yards / games_played::numeric, 1) AS receiving_yards_per_game, round(touches / games_played::numeric, 1) AS touches_per_game, round(opportunities / games_played::numeric, 1) AS opportunities_per_game, CASE WHEN attempts > 0::numeric THEN round(completions / attempts * 100::numeric, 1) ELSE NULL::numeric END AS completion_percentage, CASE WHEN attempts > 0::numeric THEN round(passing_yards / attempts, 1) ELSE NULL::numeric END AS yards_per_attempt, CASE WHEN completions > 0::numeric THEN round(passing_yards / completions, 1) ELSE NULL::numeric END AS yards_per_completion, CASE WHEN attempts > 0::numeric THEN round(passing_tds / attempts * 100::numeric, 1) ELSE NULL::numeric END AS td_percentage, CASE WHEN attempts > 0::numeric THEN round(interceptions / attempts * 100::numeric, 1) ELSE NULL::numeric END AS int_percentage, CASE WHEN dropbacks > 0::numeric THEN round(sacks / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS sack_rate, CASE WHEN dropbacks > 0::numeric THEN round(scrambles / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS scramble_rate, CASE WHEN cpoe_count > 0::numeric THEN round(total_cpoe::numeric / cpoe_count, 1) ELSE NULL::numeric END AS cpoe, CASE WHEN attempts > 0::numeric THEN round(passing_air_yards / attempts, 1) ELSE NULL::numeric END AS qb_adot, CASE WHEN targets > 0::numeric THEN round(receiving_air_yards / targets, 1) ELSE NULL::numeric END AS receiver_adot, CASE WHEN carries > 0::numeric THEN round(rushing_yards / carries, 1) ELSE NULL::numeric END AS yards_per_carry, CASE WHEN carries > 0::numeric THEN round(rushing_tds / carries * 100::numeric, 1) ELSE NULL::numeric END AS rush_td_percentage, CASE WHEN targets > 0::numeric THEN round(receptions / targets * 100::numeric, 1) ELSE NULL::numeric END AS catch_rate, CASE WHEN receptions > 0::numeric THEN round(receiving_yards / receptions, 1) ELSE NULL::numeric END AS yards_per_reception, CASE WHEN targets > 0::numeric THEN round(receiving_yards / targets, 1) ELSE NULL::numeric END AS yards_per_target, CASE WHEN targets > 0::numeric THEN round(receiving_tds / targets * 100::numeric, 1) ELSE NULL::numeric END AS receiving_td_percentage, CASE WHEN passing_air_yards > 0::numeric THEN round(passing_yards / passing_air_yards, 3) ELSE NULL::numeric END AS pacr, CASE WHEN receiving_air_yards > 0::numeric THEN round(receiving_yards / receiving_air_yards, 3) ELSE NULL::numeric END AS racr, CASE WHEN team_season_targets > 0 THEN round(targets / team_season_targets::numeric, 3) ELSE NULL::numeric END AS target_share, CASE WHEN team_season_air_yards > 0 THEN round(receiving_air_yards / team_season_air_yards::numeric, 3) ELSE NULL::numeric END AS air_yards_share, CASE WHEN team_season_targets > 0 AND team_season_air_yards > 0 THEN round(1.5 * (targets / team_season_targets::numeric) + 0.7 * (receiving_air_yards / team_season_air_yards::numeric), 3) ELSE NULL::numeric END AS wopr, CASE WHEN qb_plays > 0::numeric THEN round((successful_passes::numeric + successful_rushes::numeric) / qb_plays * 100::numeric, 1) ELSE NULL::numeric END AS success_rate, CASE WHEN passes > 0::numeric THEN round(successful_passes::numeric / passes * 100::numeric, 1) ELSE NULL::numeric END AS passing_success_rate, CASE WHEN dropbacks > 0::numeric THEN round(successful_dropbacks::numeric / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS dropback_success_rate, CASE WHEN scrambles > 0::numeric THEN round(successful_scrambles::numeric / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS scramble_success_rate, CASE WHEN carries > 0::numeric THEN round(successful_rushes::numeric / carries * 100::numeric, 1) ELSE NULL::numeric END AS rushing_success_rate, CASE WHEN targets > 0::numeric THEN round(successful_receptions::numeric / targets * 100::numeric, 1) ELSE NULL::numeric END AS target_success_rate, CASE WHEN dropbacks > 0::numeric THEN round(dropback_epa::numeric / dropbacks, 3) ELSE NULL::numeric END AS epa_per_dropback, CASE WHEN scrambles > 0::numeric THEN round(scramble_epa::numeric / scrambles, 3) ELSE NULL::numeric END AS epa_per_scramble, CASE WHEN carries > 0::numeric THEN round(rushing_epa::numeric / carries, 3) ELSE NULL::numeric END AS epa_per_carry, CASE WHEN targets > 0::numeric THEN round(receiving_epa::numeric / targets, 3) ELSE NULL::numeric END AS epa_per_target, CASE WHEN receptions > 0::numeric THEN round(receiving_epa::numeric / receptions, 3) ELSE NULL::numeric END AS epa_per_reception, CASE WHEN plays > 0 THEN round(total_epa::numeric / plays::numeric, 3) ELSE NULL::numeric END AS epa_per_play, CASE WHEN qb_plays > 0::numeric THEN round((passing_epa + rushing_epa)::numeric / qb_plays, 3) ELSE NULL::numeric END AS epa_per_qb_play, CASE WHEN passes > 0::numeric THEN round(passing_epa::numeric / passes, 3) ELSE NULL::numeric END AS epa_per_pass, passing_yards + rushing_yards + receiving_yards AS total_yards, passing_tds + rushing_tds + receiving_tds AS total_touchdowns, round((passing_yards + rushing_yards + receiving_yards) / games_played::numeric, 1) AS yards_per_game, CASE WHEN attempts >= 1::numeric THEN round(((completions / attempts * 100::numeric - 30::numeric) / 20::numeric + (passing_yards / attempts - 3::numeric) / 4::numeric + passing_tds / attempts * 20::numeric + 2.375 - interceptions / attempts * 25::numeric) / 6::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passer_rating, CASE WHEN attempts > 0::numeric THEN round(passing_first_downs / attempts * 100::numeric, 1) ELSE NULL::numeric END AS passing_first_down_rate, CASE WHEN carries > 0::numeric THEN round(rushing_first_downs / carries * 100::numeric, 1) ELSE NULL::numeric END AS rushing_first_down_rate, CASE WHEN targets > 0::numeric THEN round(receiving_first_downs / targets * 100::numeric, 1) ELSE NULL::numeric END AS receiving_first_down_rate, CASE WHEN scrambles > 0::numeric THEN round(scramble_first_downs / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS scramble_first_down_rate, CASE WHEN passes > 0::numeric THEN round(explosive_passes / passes * 100::numeric, 1) ELSE NULL::numeric END AS explosive_pass_rate, CASE WHEN carries > 0::numeric THEN round(explosive_runs / carries * 100::numeric, 1) ELSE NULL::numeric END AS explosive_run_rate, CASE WHEN targets > 0::numeric THEN round(explosive_receptions / targets * 100::numeric, 1) ELSE NULL::numeric END AS explosive_target_rate, CASE WHEN receptions > 0::numeric THEN round(explosive_receptions / receptions * 100::numeric, 1) ELSE NULL::numeric END AS explosive_catch_rate, CASE WHEN scrambles > 0::numeric THEN round(explosive_scrambles / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS explosive_scramble_rate FROM player_season_stats ps);--> statement-breakpoint
CREATE VIEW "public"."player_career_stats" AS (SELECT player_id, max(player_name) AS player_name, season_type, (array_agg(team ORDER BY season DESC))[1] AS team, min(season) AS first_season, max(season) AS last_season, count(DISTINCT season) AS seasons_played, max("position") AS "position", sum(games_played) AS games_played, sum(plays) AS plays, sum(qb_plays) AS qb_plays, sum(completions) AS completions, sum(attempts) AS attempts, sum(passing_yards) AS passing_yards, sum(passing_tds) AS passing_tds, sum(interceptions) AS interceptions, sum(sacks) AS sacks, sum(sack_yards) AS sack_yards, sum(passing_air_yards) AS passing_air_yards, sum(passing_yards) - sum(passing_air_yards) AS passing_yards_after_catch, sum(passes) AS passes, sum(carries) AS carries, sum(rushing_yards) AS rushing_yards, sum(rushing_tds) AS rushing_tds, sum(rushing_fumbles) AS rushing_fumbles, sum(rushing_fumbles_lost) AS rushing_fumbles_lost, sum(rushing_first_downs) AS rushing_first_downs, sum(sack_fumbles) AS sack_fumbles, sum(sack_fumbles_lost) AS sack_fumbles_lost, sum(targets) AS targets, sum(receptions) AS receptions, sum(receiving_yards) AS receiving_yards, sum(receiving_tds) AS receiving_tds, sum(receiving_fumbles) AS receiving_fumbles, sum(receiving_fumbles_lost) AS receiving_fumbles_lost, sum(receiving_air_yards) AS receiving_air_yards, sum(receiving_yards_after_catch) AS receiving_yards_after_catch, sum(receiving_first_downs) AS receiving_first_downs, sum(dropbacks) AS dropbacks, sum(total_cpoe) AS total_cpoe, sum(cpoe_count) AS cpoe_count, sum(scrambles) AS scrambles, sum(scramble_yards) AS scramble_yards, sum(scramble_first_downs) AS scramble_first_downs, sum(passing_first_downs) AS passing_first_downs, sum(explosive_passes) AS explosive_passes, sum(explosive_runs) AS explosive_runs, sum(explosive_receptions) AS explosive_receptions, sum(explosive_scrambles) AS explosive_scrambles, sum(successful_passes) AS successful_passes, sum(successful_dropbacks) AS successful_dropbacks, sum(successful_scrambles) AS successful_scrambles, sum(successful_rushes) AS successful_rushes, sum(successful_receptions) AS successful_receptions, sum(qb_targets) AS qb_targets, sum(qb_air_yards) AS qb_air_yards, sum(total_epa) AS total_epa, sum(passing_epa) AS passing_epa, sum(rushing_epa) AS rushing_epa, sum(receiving_epa) AS receiving_epa, sum(dropback_epa) AS dropback_epa, sum(scramble_epa) AS scramble_epa, sum(touches) AS touches, sum(opportunities) AS opportunities, sum(team_season_targets) AS team_career_targets, sum(team_season_air_yards) AS team_career_air_yards FROM player_season_stats GROUP BY player_id, season_type);--> statement-breakpoint
CREATE VIEW "public"."player_career_stats_with_metrics" AS (SELECT player_id, player_name, season_type, team, first_season, last_season, seasons_played, "position", games_played, plays, qb_plays, completions, attempts, passing_yards, passing_tds, interceptions, sacks, sack_yards, passing_air_yards, passing_yards_after_catch, passes, carries, rushing_yards, rushing_tds, rushing_fumbles, rushing_fumbles_lost, rushing_first_downs, sack_fumbles, sack_fumbles_lost, targets, receptions, receiving_yards, receiving_tds, receiving_fumbles, receiving_fumbles_lost, receiving_air_yards, receiving_yards_after_catch, receiving_first_downs, dropbacks, total_cpoe, cpoe_count, scrambles, scramble_yards, scramble_first_downs, passing_first_downs, explosive_passes, explosive_runs, explosive_receptions, explosive_scrambles, successful_passes, successful_dropbacks, successful_scrambles, successful_rushes, successful_receptions, qb_targets, qb_air_yards, total_epa, passing_epa, rushing_epa, receiving_epa, dropback_epa, scramble_epa, touches, opportunities, team_career_targets, team_career_air_yards, round(completions / NULLIF(games_played, 0::numeric), 1) AS completions_per_game, round(attempts / NULLIF(games_played, 0::numeric), 1) AS attempts_per_game, round(passing_yards / NULLIF(games_played, 0::numeric), 1) AS passing_yards_per_game, round(carries / NULLIF(games_played, 0::numeric), 1) AS carries_per_game, round(rushing_yards / NULLIF(games_played, 0::numeric), 1) AS rushing_yards_per_game, round(targets / NULLIF(games_played, 0::numeric), 1) AS targets_per_game, round(receptions / NULLIF(games_played, 0::numeric), 1) AS receptions_per_game, round(receiving_yards / NULLIF(games_played, 0::numeric), 1) AS receiving_yards_per_game, CASE WHEN attempts > 0::numeric THEN round(completions / attempts * 100::numeric, 1) ELSE NULL::numeric END AS completion_percentage, CASE WHEN attempts > 0::numeric THEN round(passing_yards / attempts, 1) ELSE NULL::numeric END AS yards_per_attempt, CASE WHEN attempts > 0::numeric THEN round(passing_tds / attempts * 100::numeric, 1) ELSE NULL::numeric END AS td_percentage, CASE WHEN attempts > 0::numeric THEN round(interceptions / attempts * 100::numeric, 1) ELSE NULL::numeric END AS int_percentage, CASE WHEN (attempts + sacks) > 0::numeric THEN round(sacks / (attempts + sacks) * 100::numeric, 1) ELSE NULL::numeric END AS sack_rate, CASE WHEN dropbacks > 0::numeric THEN round(scrambles / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS scramble_rate, CASE WHEN cpoe_count > 0::numeric THEN round(total_cpoe::numeric / cpoe_count, 1) ELSE NULL::numeric END AS cpoe, CASE WHEN attempts > 0::numeric THEN round(passing_air_yards / attempts, 1) ELSE NULL::numeric END AS qb_adot, CASE WHEN targets > 0::numeric THEN round(receiving_air_yards / targets, 1) ELSE NULL::numeric END AS receiver_adot, CASE WHEN carries > 0::numeric THEN round(rushing_yards / carries, 1) ELSE NULL::numeric END AS yards_per_carry, CASE WHEN carries > 0::numeric THEN round(rushing_tds / carries * 100::numeric, 1) ELSE NULL::numeric END AS rush_td_percentage, CASE WHEN targets > 0::numeric THEN round(receptions / targets * 100::numeric, 1) ELSE NULL::numeric END AS catch_rate, CASE WHEN receptions > 0::numeric THEN round(receiving_yards / receptions, 1) ELSE NULL::numeric END AS yards_per_reception, CASE WHEN targets > 0::numeric THEN round(receiving_yards / targets, 1) ELSE NULL::numeric END AS yards_per_target, CASE WHEN targets > 0::numeric THEN round(receiving_tds / targets * 100::numeric, 1) ELSE NULL::numeric END AS receiving_td_percentage, CASE WHEN targets > 0::numeric THEN round(successful_receptions::numeric / targets * 100::numeric, 1) ELSE NULL::numeric END AS target_success_rate, CASE WHEN passing_air_yards > 0::numeric THEN round(passing_yards / passing_air_yards, 3) ELSE NULL::numeric END AS pacr, CASE WHEN receiving_air_yards > 0::numeric THEN round(receiving_yards / receiving_air_yards, 3) ELSE NULL::numeric END AS racr, CASE WHEN team_career_targets > 0::numeric THEN round(targets / team_career_targets, 3) ELSE NULL::numeric END AS target_share, CASE WHEN team_career_air_yards > 0::numeric THEN round(receiving_air_yards / team_career_air_yards, 3) ELSE NULL::numeric END AS air_yards_share, CASE WHEN team_career_targets > 0::numeric AND team_career_air_yards > 0::numeric THEN round(1.5 * (targets / team_career_targets) + 0.7 * (receiving_air_yards / team_career_air_yards), 3) ELSE NULL::numeric END AS wopr, CASE WHEN qb_plays > 0::numeric THEN round((successful_passes::numeric + successful_rushes::numeric) / qb_plays * 100::numeric, 1) ELSE NULL::numeric END AS success_rate, CASE WHEN passes > 0::numeric THEN round(successful_passes::numeric / passes * 100::numeric, 1) ELSE NULL::numeric END AS passing_success_rate, CASE WHEN dropbacks > 0::numeric THEN round(successful_dropbacks::numeric / dropbacks * 100::numeric, 1) ELSE NULL::numeric END AS dropback_success_rate, CASE WHEN scrambles > 0::numeric THEN round(successful_scrambles::numeric / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS scramble_success_rate, CASE WHEN carries > 0::numeric THEN round(successful_rushes::numeric / carries * 100::numeric, 1) ELSE NULL::numeric END AS rushing_success_rate, CASE WHEN passes > 0::numeric THEN round(passing_epa::numeric / passes, 2) ELSE NULL::numeric END AS epa_per_pass, CASE WHEN dropbacks > 0::numeric THEN round(dropback_epa::numeric / dropbacks, 2) ELSE NULL::numeric END AS epa_per_dropback, CASE WHEN scrambles > 0::numeric THEN round(scramble_epa::numeric / scrambles, 2) ELSE NULL::numeric END AS epa_per_scramble, CASE WHEN carries > 0::numeric THEN round(rushing_epa::numeric / carries, 2) ELSE NULL::numeric END AS epa_per_carry, CASE WHEN targets > 0::numeric THEN round(receiving_epa::numeric / targets, 2) ELSE NULL::numeric END AS epa_per_target, CASE WHEN receptions > 0::numeric THEN round(receiving_epa::numeric / receptions, 2) ELSE NULL::numeric END AS epa_per_reception, CASE WHEN plays > 0::numeric THEN round(total_epa::numeric / plays, 2) ELSE NULL::numeric END AS epa_per_play, CASE WHEN qb_plays > 0::numeric THEN round((passing_epa + rushing_epa)::numeric / qb_plays, 2) ELSE NULL::numeric END AS epa_per_qb_play, CASE WHEN passes > 0::numeric THEN round(explosive_passes / passes * 100::numeric, 1) ELSE NULL::numeric END AS explosive_pass_rate, CASE WHEN carries > 0::numeric THEN round(explosive_runs / carries * 100::numeric, 1) ELSE NULL::numeric END AS explosive_run_rate, CASE WHEN targets > 0::numeric THEN round(explosive_receptions / targets * 100::numeric, 1) ELSE NULL::numeric END AS explosive_target_rate, CASE WHEN receptions > 0::numeric THEN round(explosive_receptions / receptions * 100::numeric, 1) ELSE NULL::numeric END AS explosive_catch_rate, CASE WHEN scrambles > 0::numeric THEN round(explosive_scrambles / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS explosive_scramble_rate, passing_yards + rushing_yards + receiving_yards AS total_yards, passing_tds + rushing_tds + receiving_tds AS total_touchdowns, round((passing_yards + rushing_yards + receiving_yards) / games_played, 1) AS yards_per_game, CASE WHEN attempts >= 1::numeric THEN round(((completions / attempts * 100::numeric - 30::numeric) / 20::numeric + (passing_yards / attempts - 3::numeric) / 4::numeric + passing_tds / attempts * 20::numeric + 2.375 - interceptions / attempts * 25::numeric) / 6::numeric * 100::numeric, 1) ELSE NULL::numeric END AS passer_rating, CASE WHEN attempts > 0::numeric THEN round(passing_first_downs / attempts * 100::numeric, 1) ELSE NULL::numeric END AS passing_first_down_rate, CASE WHEN carries > 0::numeric THEN round(rushing_first_downs / carries * 100::numeric, 1) ELSE NULL::numeric END AS rushing_first_down_rate, CASE WHEN targets > 0::numeric THEN round(receiving_first_downs / targets * 100::numeric, 1) ELSE NULL::numeric END AS receiving_first_down_rate, CASE WHEN scrambles > 0::numeric THEN round(scramble_first_downs / scrambles * 100::numeric, 1) ELSE NULL::numeric END AS scramble_first_down_rate, round(touches / games_played, 1) AS touches_per_game, round(opportunities / games_played, 1) AS opportunities_per_game FROM player_career_stats pc);
*/